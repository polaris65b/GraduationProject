# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'home.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QSize
from PyQt5.QtCore import Qt, QDate
from PyQt5.QtGui import QPainter, QPen, QColor
from PyQt5.QtCore import Qt, QDate
from datetime import datetime
import paramiko
import sqlite3
import datetime

class CalendarWidget(QtWidgets.QCalendarWidget):
    def __init__(self, parent=None):
        super(CalendarWidget, self).__init__(parent)
        self.date_markers = []  # 날짜에 대한 마커 정보를 저장할 리스트
        #self.date_markers = {}  # 날짜에 대한 마커 정보를 저장할 리스트

    def paintCell(self, painter, rect, date):
        super(CalendarWidget, self).paintCell(painter, rect, date)

        # 저장된 날짜에 대한 마커를 그립니다.
        for marker_date, marker_color in self.date_markers:
            if date == marker_date:
                painter.setBrush(marker_color)
                painter.drawEllipse(rect.center(), 8, 8)



class Home(object):
    def __init__(self, main_window):
        self.MainWindow = main_window

    def setupUi(self, MainWindow, userID):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(920, 576)
        MainWindow.setStyleSheet("background-color: rgb(255, 238, 238);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.name_label_1 = QtWidgets.QLabel(self.centralwidget)
        self.name_label_1.setGeometry(QtCore.QRect(30, 20, 131, 41))
        font = QtGui.QFont()
        font.setFamily("HY견고딕")
        font.setPointSize(25)
        font.setBold(False)
        font.setWeight(50)
        self.name_label_1.setFont(font)
        self.name_label_1.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.name_label_1.setObjectName("name_label_1")
        self.fix_label_1 = QtWidgets.QLabel(self.centralwidget)
        self.fix_label_1.setGeometry(QtCore.QRect(170, 30, 551, 31))
        font = QtGui.QFont()
        font.setFamily("나눔고딕")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.fix_label_1.setFont(font)
        self.fix_label_1.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.fix_label_1.setObjectName("fix_label_1")
        self.gridWidget = QtWidgets.QWidget(self.centralwidget)
        self.gridWidget.setGeometry(QtCore.QRect(30, 80, 231, 361))
        self.gridWidget.setStyleSheet("background-color: rgb(255, 251, 251);\n"
"border-radius:20px;")
        self.gridWidget.setObjectName("gridWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.gridWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.gridWidget_2.setGeometry(QtCore.QRect(280, 80, 201, 171))
        self.gridWidget_2.setStyleSheet("background-color: rgb(255, 251, 251);\n"
"border-radius:20px;")
        self.gridWidget_2.setObjectName("gridWidget_2")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.gridWidget_2)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        #self.calendarWidget = QtWidgets.QCalendarWidget(self.centralwidget)
        self.calendarWidget = CalendarWidget(self.centralwidget)  # Customized Calendar Widget
        self.calendarWidget.setGeometry(QtCore.QRect(520, 110, 331, 281))
        self.calendarWidget.setStyleSheet("background-color:rgb(255, 255, 255);\n"
"color:rgb(0, 0, 0);")
        self.calendarWidget.setVerticalHeaderFormat(QtWidgets.QCalendarWidget.NoVerticalHeader)
        self.calendarWidget.setObjectName("calendarWidget")
        self.user_label = QtWidgets.QLabel(self.centralwidget)
        self.user_label.setGeometry(QtCore.QRect(470, 530, 81, 21))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift SemiBold Condensed")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.user_label.setFont(font)
        self.user_label.setStyleSheet("background-color:rgba(255,255,255,0);")
        self.user_label.setAlignment(QtCore.Qt.AlignCenter)
        self.user_label.setObjectName("user_label")
        self.logout_image_button = QtWidgets.QPushButton(self.centralwidget)
        self.logout_image_button.setGeometry(QtCore.QRect(110, 460, 61, 61))
        self.logout_image_button.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("gui image/logout.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.logout_image_button.setIcon(icon)
        self.logout_image_button.setIconSize(QtCore.QSize(61, 61))
        self.logout_image_button.setObjectName("logout_image_button")
        self.logout_image_button.setStyleSheet('''
                    QPushButton {
                        border: none;
                        box-shadow: none;
                    }
                ''')
        self.load_label = QtWidgets.QLabel(self.centralwidget)
        self.load_label.setGeometry(QtCore.QRect(290, 530, 81, 21))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift SemiBold Condensed")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.load_label.setFont(font)
        self.load_label.setStyleSheet("background-color:rgba(255,255,255,0);")
        self.load_label.setAlignment(QtCore.Qt.AlignCenter)
        self.load_label.setObjectName("load_label")
        self.result_image_button = QtWidgets.QPushButton(self.centralwidget)
        self.result_image_button.setGeometry(QtCore.QRect(300, 460, 61, 61))
        self.result_image_button.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("gui image/load.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.result_image_button.setIcon(icon1)
        self.result_image_button.setIconSize(QtCore.QSize(61, 61))
        self.result_image_button.setObjectName("result_image_button")
        self.result_image_button.setStyleSheet('''
                    QPushButton {
                        border: none;
                        box-shadow: none;
                    }
                ''')
        self.start_button = QtWidgets.QPushButton(self.centralwidget)
        self.start_button.setGeometry(QtCore.QRect(650, 470, 191, 51))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift SemiBold")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.start_button.setFont(font)
        self.start_button.setStyleSheet("background-color:rgb(217, 216, 255);\n"
"border-radius:10px;\n"
"border-color: rgb(205, 205, 255);\n"
"")
        icon = QtGui.QIcon.fromTheme("start")
        self.start_button.setIcon(icon)
        self.start_button.setObjectName("start_button")
        self.user_image_button = QtWidgets.QPushButton(self.centralwidget)
        self.user_image_button.setGeometry(QtCore.QRect(480, 460, 61, 61))
        self.user_image_button.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("gui image/user.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.user_image_button.setIcon(icon2)
        self.user_image_button.setIconSize(QtCore.QSize(55, 55))
        self.user_image_button.setObjectName("user_image_button")
        self.user_image_button.setStyleSheet('''
                    QPushButton {
                        border: none;
                        box-shadow: none;
                    }
                ''')
        self.logout_label = QtWidgets.QLabel(self.centralwidget)
        self.logout_label.setGeometry(QtCore.QRect(100, 530, 81, 21))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift SemiBold Condensed")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.logout_label.setFont(font)
        self.logout_label.setStyleSheet("background-color:rgba(255,255,255,0);")
        self.logout_label.setAlignment(QtCore.Qt.AlignCenter)
        self.logout_label.setObjectName("logout_label")
        self.balance_label = QtWidgets.QLabel(self.centralwidget)
        self.balance_label.setGeometry(QtCore.QRect(320, 110, 121, 131))
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(100)
        font.setBold(True)
        font.setWeight(75)
        self.balance_label.setFont(font)
        self.balance_label.setStyleSheet("background-color: rgb(255, 251, 251);\n"
"color:rgb(105, 105, 255)")
        self.balance_label.setAlignment(QtCore.Qt.AlignCenter)
        self.balance_label.setObjectName("balance_label")
        self.fix_label_2 = QtWidgets.QLabel(self.centralwidget)
        self.fix_label_2.setGeometry(QtCore.QRect(310, 90, 141, 21))
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.fix_label_2.setFont(font)
        self.fix_label_2.setStyleSheet("background-color: rgb(255, 251, 251);")
        self.fix_label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.fix_label_2.setObjectName("fix_label_2")
        self.gridWidget_3 = QtWidgets.QWidget(self.centralwidget)
        self.gridWidget_3.setGeometry(QtCore.QRect(490, 80, 391, 361))
        self.gridWidget_3.setStyleSheet("background-color: rgb(255, 251, 251);\n"
"border-radius:20px;")
        self.gridWidget_3.setObjectName("gridWidget_3")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.gridWidget_3)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.count_label = QtWidgets.QLabel(self.centralwidget)
        self.count_label.setGeometry(QtCore.QRect(300, 280, 81, 61))
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(40)
        font.setBold(True)
        font.setWeight(75)
        self.count_label.setFont(font)
        self.count_label.setStyleSheet("background-color: rgb(255, 251, 251);\n"
"color:rgb(222, 155, 255)")
        self.count_label.setAlignment(QtCore.Qt.AlignCenter)
        self.count_label.setObjectName("count_label")
        self.fix_label_3 = QtWidgets.QLabel(self.centralwidget)
        self.fix_label_3.setGeometry(QtCore.QRect(380, 310, 81, 21))
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.fix_label_3.setFont(font)
        self.fix_label_3.setStyleSheet("background-color: rgb(255, 251, 251);")
        self.fix_label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.fix_label_3.setObjectName("fix_label_3")
        self.gridWidget_4 = QtWidgets.QWidget(self.centralwidget)
        self.gridWidget_4.setGeometry(QtCore.QRect(280, 270, 201, 171))
        self.gridWidget_4.setStyleSheet("background-color: rgb(255, 251, 251);\n"
"border-radius:20px;")
        self.gridWidget_4.setObjectName("gridWidget_4")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.gridWidget_4)
        self.gridLayout_4.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.fix_label_4 = QtWidgets.QLabel(self.centralwidget)
        self.fix_label_4.setGeometry(QtCore.QRect(310, 350, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.fix_label_4.setFont(font)
        self.fix_label_4.setStyleSheet("background-color: rgba(255, 255, 255, 0);\n"
"color:rgb(141, 141, 141);")
        self.fix_label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.fix_label_4.setObjectName("fix_label_4")
        self.week_count_label = QtWidgets.QLabel(self.centralwidget)
        self.week_count_label.setGeometry(QtCore.QRect(310, 380, 141, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.week_count_label.setFont(font)
        self.week_count_label.setStyleSheet("background-color: rgba(255, 255, 255, 0);\n"
"color:rgb(141, 141, 141);")
        self.week_count_label.setAlignment(QtCore.Qt.AlignCenter)
        self.week_count_label.setObjectName("week_count_label")
        self.sex_image_label = QtWidgets.QLabel(self.centralwidget)
        self.sex_image_label.setGeometry(QtCore.QRect(50, 100, 191, 191))
        self.sex_image_label.setStyleSheet("background-color:rgba(0,0,0,0);")
        self.sex_image_label.setText("")
        ##################################################################################
        self.sex_image = QtGui.QPixmap("gui image/man.jpg")
        scaled_image = self.sex_image.scaled(190, 190, QtCore.Qt.KeepAspectRatio)
        ##################################################################################
        self.sex_image_label.setPixmap(scaled_image)
        self.sex_image_label.setObjectName("sex_image_label")
        self.name_label_2 = QtWidgets.QLabel(self.centralwidget)
        self.name_label_2.setGeometry(QtCore.QRect(50, 310, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.name_label_2.setFont(font)
        self.name_label_2.setStyleSheet("background-color:rgba(0,0,0,0);")
        self.name_label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.name_label_2.setObjectName("name_label_2")
        self.birth_label = QtWidgets.QLabel(self.centralwidget)
        self.birth_label.setGeometry(QtCore.QRect(90, 350, 151, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.birth_label.setFont(font)
        self.birth_label.setStyleSheet("background-color:rgba(0,0,0,0);\n"
"color:rgb(141, 141, 141);")
        self.birth_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.birth_label.setObjectName("birth_label")
        self.height_label = QtWidgets.QLabel(self.centralwidget)
        self.height_label.setGeometry(QtCore.QRect(90, 380, 151, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.height_label.setFont(font)
        self.height_label.setStyleSheet("background-color:rgba(0,0,0,0);\n"
"color:rgb(141, 141, 141);")
        self.height_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.height_label.setObjectName("height_label")

        ###########################################################################
        self.logout_image_button.clicked.connect(self.move_to_main)
        self.start_button.clicked.connect(lambda: self.move_to_train(userID))
        self.user_image_button.clicked.connect(lambda: self.move_to_user(userID))
        self.result_image_button.clicked.connect(lambda: self.move_to_result(userID))
        self.populate_calendar(userID)
        ###########################################################################

        self.gridWidget_4.raise_()
        self.gridWidget_3.raise_()
        self.name_label_1.raise_()
        self.fix_label_1.raise_()
        self.gridWidget.raise_()
        self.gridWidget_2.raise_()
        self.calendarWidget.raise_()
        self.user_label.raise_()
        self.logout_image_button.raise_()
        self.load_label.raise_()
        self.result_image_button.raise_()
        self.start_button.raise_()
        self.user_image_button.raise_()
        self.logout_label.raise_()
        self.balance_label.raise_()
        self.fix_label_2.raise_()
        self.count_label.raise_()
        self.fix_label_3.raise_()
        self.fix_label_4.raise_()
        self.week_count_label.raise_()
        self.sex_image_label.raise_()
        self.name_label_2.raise_()
        self.birth_label.raise_()
        self.height_label.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow, userID)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow, userID):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Home"))
        self.name_label_1.setText(_translate("MainWindow", "제갈공명"))
        self.fix_label_1.setText(_translate("MainWindow", "님 오늘도 힘차게 훈련을 진행해볼까요?"))
        self.user_label.setText(_translate("MainWindow", "사용자"))
        self.load_label.setText(_translate("MainWindow", "훈련결과"))
        self.start_button.setText(_translate("MainWindow", "훈련시작"))
        self.logout_label.setText(_translate("MainWindow", "로그아웃"))
        self.balance_label.setText(_translate("MainWindow", "2"))
        self.fix_label_2.setText(_translate("MainWindow", "현재 균형활성도"))
        self.count_label.setText(_translate("MainWindow", "55"))
        self.fix_label_3.setText(_translate("MainWindow", "훈련횟수"))
        self.fix_label_4.setText(_translate("MainWindow", "이번 주 훈련횟수"))
        self.week_count_label.setText(_translate("MainWindow", "00번"))
        self.name_label_2.setText(_translate("MainWindow", "제갈공명"))
        self.birth_label.setText(_translate("MainWindow", "1999.99.99(만 55세)"))
        self.height_label.setText(_translate("MainWindow", "172cm / 15%"))
        self.user_data(userID, self.name_label_1, self.name_label_2, self.birth_label, self.height_label)   # 추가
        self.history_data(userID, self.balance_label, self.count_label, self.week_count_label)

    # 만나이 계산하기
    def calculate_age(self, birth_date):
        # 현재 날짜 가져오기
        today = datetime.datetime.now()

        # 생일을 datetime 객체로 변환
        birth_date = datetime.datetime.strptime(birth_date, "%Y-%m-%d")

        # 만 나이 계산
        age = today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))

        return age

    # 이번 주의 시작과 끝을 반환하는 함수
    def get_current_week_range(self):
        today = datetime.datetime.now().date()  # 현재 날짜와 시간을 가져온 후 날짜 부분만 추출
        start_of_week = today - datetime.timedelta(days=today.weekday())
        end_of_week = start_of_week + datetime.timedelta(days=6)
        return start_of_week, end_of_week

    # 튜플로 된 날짜를 datetime 객체로 변환하는 함수
    def parse_date_tuple(self, date_tuple):
        date_str = date_tuple[0]  # 튜플의 첫 번째 요소에서 날짜 문자열을 가져옴
        return datetime.datetime.strptime(date_str, "%Y-%m-%d").date()

    # 주어진 날짜 리스트에서 이번 주에 속하는 날짜들의 개수를 반환하는 함수
    def count_dates_in_current_week(self, date_list):
        start_of_week, end_of_week = self.get_current_week_range()
        count = sum(1 for date_tuple in date_list if start_of_week <= self.parse_date_tuple(date_tuple) <= end_of_week)
        return count

    # 사용자 정보에 따라 라벨에 정보 넣기
    def user_data(self, userID, name_label_1, name_label_2, birth_label, height_label):
        # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        # 쿼리 실행
        cursor.execute("SELECT * FROM user WHERE ID = ?", (userID, ))
        row = cursor.fetchall()

        print(userID)
        print(row)
        name_label_1.setText(row[0][1])
        name_label_2.setText(row[0][1])
        print(row[0][2])
        birth_date = row[0][2]
        print(self.calculate_age(birth_date))
        birth_str = row[0][2] + " (만 " + str(self.calculate_age(row[0][2])) + "세)"
        birth_label.setText(birth_str)
        height_str = str(row[0][4]) + " / " + str(row[0][5]) + "%"
        height_label.setText(height_str)

        if row[0][3] == 2 :
            self.sex_image_label = QtWidgets.QLabel(self.centralwidget)
            self.sex_image_label.setGeometry(QtCore.QRect(50, 100, 191, 191))
            self.sex_image_label.setStyleSheet("background-color:rgba(0,0,0,0);")
            self.sex_image_label.setText("")
            self.sex_image = QtGui.QPixmap("gui image/woman.jpg")
            scaled_image = self.sex_image.scaled(190, 190, QtCore.Qt.KeepAspectRatio)
            self.sex_image_label.setPixmap(scaled_image)
            self.sex_image_label.setObjectName("sex_image_label")

    # db(table : history)에서 균형활성도, 총 훈련 횟수, 이번주 훈련횟수 가져와서 입력
    def history_data(self, userID, balance_label, count_lbel, week_count_label):
        # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        # 쿼리 실행
        cursor.execute("SELECT * FROM history WHERE user_id = ? ORDER BY Date DESC", (userID,))
        rows = cursor.fetchall()

        if not rows :
            balance_label.setText("0")
            count_lbel.setText("0")
            week_count_label.setText("0")
        else :
            cursor.execute("SELECT * FROM history WHERE user_id = ? ORDER BY Grade ASC", (userID,))
            rows = cursor.fetchall()

            balance_label.setText(str(rows[0][2]))
            count_lbel.setText(str(len(rows)))

            cursor.execute("SELECT Date FROM history WHERE user_id = ? ORDER BY Date DESC", (userID,))
            rows = cursor.fetchall()
            count = self.count_dates_in_current_week(rows)
            week_count_str = "0" + str(count) + "번"
            week_count_label.setText(week_count_str)

    # 캘린더에 정보 표시
    def populate_calendar(self, userID):
        # 데이터베이스에서 해당 사용자의 날짜를 가져옵니다.
        db_dates = self.get_dates_from_database(userID)

        # 캘린더에 날짜를 표시하는 방식으로 수정합니다.
        for date_str in db_dates:
            year, month, day = map(int, date_str.split("-"))
            date = QtCore.QDate(year, month, day)
            self.calendarWidget.date_markers.append((date, QtGui.QColor(Qt.red)))
            #date_key = date.toString("yyyy-MM-dd")
            #self.calendarWidget.addMarker(date_key, QtGui.QColor(Qt.red))
        self.calendarWidget.update()


    def get_dates_from_database(self, userID):
        # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        # 쿼리 실행
        cursor.execute("SELECT Date FROM history WHERE user_id = ? ORDER BY Date DESC", (userID,))
        rows = cursor.fetchall()

        date_list = []

        if not rows :
            return date_list

        for row in rows :
            date_list.append(row[0])

        print(date_list)
        return date_list

    # 로그아웃 함수(Main 화면으로 돌아감)
    def move_to_main(self):
        try:
            # 현재 MainWindow를 새로운 창으로 변경
            from Main import Main
            self.MainWindow.setWindowTitle("Main")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.home_window = Main(self.MainWindow)
            self.home_window.setupUi(self.MainWindow)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("move to main from home error : ", e)

    # 훈련 시작 함수(train 화면으로 이동)
    def move_to_train(self, userID):
        try:
            # 현재 MainWindow를 새로운 창으로 변경
            from train import Train
            self.MainWindow.setWindowTitle("Train")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.home_window = Train(self.MainWindow)
            self.home_window.setupUi(self.MainWindow, userID)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("move to train from home error : ", e)

    # 사용자 정보 이동 함수(user 화면으로 이동)
    def move_to_user(self, userID):
        try:
            # 현재 MainWindow를 새로운 창으로 변경
            from user import User
            self.MainWindow.setWindowTitle("User")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.home_window = User(self.MainWindow)
            self.home_window.setupUi(self.MainWindow, userID)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("move to user from home error : ", e)

    # 결과 화면 이동 함수(result 화면으로 이동)
    def move_to_result(self, userID):
        try:
            # 현재 MainWindow를 새로운 창으로 변경
            from result import Result
            self.MainWindow.setWindowTitle("User")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.home_window = Result(self.MainWindow)
            self.home_window.setupUi(self.MainWindow, userID)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("move to user from home error : ", e)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Home(MainWindow)
    ui.setupUi(MainWindow, 2)
    MainWindow.show()
    sys.exit(app.exec_())
