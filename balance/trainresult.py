# -*- coding: utf-8 -*-
import math
import os
from datetime import datetime

import joblib
import numpy as np
import pandas as pd
# Form implementation generated from reading ui file 'trainresult.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QDate
from PyQt5.QtWidgets import QApplication, QDateEdit
import paramiko
import sqlite3
import user_inform_modify
import Login

count_list = []

class trainresult(object):
    def __init__(self, main_window):
        self.MainWindow = main_window

    def setupUi(self, MainWindow, userID, date):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1280, 700)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.fix_label_image = QtWidgets.QLabel(self.centralwidget)
        self.fix_label_image.setGeometry(QtCore.QRect(40, 70, 41, 41))
        self.fix_label_image.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.fix_label_image.setText("")
        self.fix_label_image.setPixmap(QtGui.QPixmap("balance/images/user (1).png"))
        self.fix_label_image.setScaledContents(True)
        self.fix_label_image.setObjectName("fix_label_image")
        self.fix_lable8 = QtWidgets.QLabel(self.centralwidget)
        self.fix_lable8.setGeometry(QtCore.QRect(290, 0, 1280, 720))
        self.fix_lable8.setStyleSheet("background-color:rgb(240,240,240);")
        self.fix_lable8.setText("")
        self.fix_lable8.setScaledContents(False)
        self.fix_lable8.setObjectName("fix_lable8")
        '''
        self.fix_dateEdit = QtWidgets.QDateEdit(self.centralwidget)
        self.fix_dateEdit.setGeometry(QtCore.QRect(567, 45, 181, 51))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(-1)
        self.fix_dateEdit.setFont(font)
        
        self.fix_dateEdit.setStyleSheet("QDateEdit {\n"
"    font-size:28px;\n"
"    border: none;\n"
"    background: transparent;\n"
"}\n"
"\n"
"\n"
"/* Style for header area ###########################*/\n"
"#calendarWidget QWidget{\n"
"    alternate-background-color:#B8E2FF;\n"
"}\n"
"\n"
"/* Style for top navigation area #####################*/\n"
"\n"
"#qt_calendar_navigationbar{\n"
"    background-color:#fff;\n"
"    border:2px solid #B8E2FF;\n"
"    border-bottom:0px;\n"
"    border-top-left-radius: 5px;\n"
"    border-top-right-radius: 5px;\n"
"}\n"
"\n"
"/* Style for month change button ######################*/\n"
"#qt_calendar_prevmonth,\n"
"#qt_calendar_nextmonth{\n"
"/*border delete*/\n"
"border:none;\n"
"\n"
"/*delete default icons*/\n"
"\n"
"qproperty-icon:none;\n"
"\n"
"min-width:13px;\n"
"max-width:13px;\n"
"min-height:13px;\n"
"max-height:13px;\n"
"\n"
"border-radius:5px;\n"
"\n"
"/*set background transparent*/\n"
"background-color:transparent;\n"
"padding:5px;\n"
"}\n"
"\n"
"/*Style for prev month button######################*/\n"
"#qt_calendar_prevmonth{\n"
"    margin-left:5px;\n"
"    \n"
"    image: url(:/icon/images/left.ico);\n"
"}\n"
"\n"
"/* Style for next month button########################*/\n"
"\n"
"#qt_calendar_nextmonth{\n"
"    margin-right:5px;\n"
"    image: url(:/icon/images/righticon.ico);\n"
"}\n"
"\n"
"\n"
"#qt_calender_prevmonth:hover,\n"
"#qt_calendar_nextmonth:hover{\n"
"    background-color:#55aaff;\n"
"}\n"
"\n"
"#qt_calender_prevmonth:pressed,\n"
"#qt_calendar_nextmonth:pressed{\n"
"    background-color:gba(235,235,235,100);\n"
"}\n"
"\n"
"/* Style for month and year buttons ###############*/\n"
"#qt_calendar_yearbutton{\n"
"    color:#000;\n"
"    margin:5px;\n"
"    border-radius:5px;\n"
"    font-size:13px;\n"
"    padding:0 10px;\n"
"}\n"
"\n"
"#qt_calendar_monthbutton{\n"
"    width:110px;\n"
"    color:#000;\n"
"    font_size:13px;\n"
"    margin:5px 0;\n"
"    border-radius:5px;\n"
"    padding:0px 2;\n"
"}\n"
"\n"
"#qt_calendar_yearnutton:hover,\n"
"#qt_calendar_monthbutton:hover{\n"
"    background-color:#55aaff;\n"
"}\n"
"\n"
"#qt_calendar_yearnutton:pressed,\n"
"#qt_calendar_monthbutton:pressed{\n"
"    background-color:rgba(235,235,235,100);\n"
"}\n"
"\n"
"/*Style for year input lineEdit ################*/\n"
"#qt_calendar_yearedit{\n"
"    min-width:53px;\n"
"    color: #000;\n"
"    background:transparent;\n"
"    front-size:13px;\n"
"}\n"
"\n"
"/* Style for year change button ################ */\n"
"\n"
"#qt_calendar_yearedit::down-button{\n"
"    image: url(:/icon/images/down.ico);\n"
"    subcontrol-position:right;\n"
"}\n"
"#qt_calendar_yearedit::up-button{\n"
"    image: url(:/icon/images/up.ico);\n"
"    subcontrol-position:left;\n"
"}\n"
"\n"
"#qt_calendar_yearedit::down-button,\n"
"#qt_calendar_yearedit::up-button{\n"
"    width:10px;\n"
"    padding:0px 5px;\n"
"    border-radius:3px;\n"
"}\n"
"\n"
"#qt_calendar_yearedit::down-button:hover,\n"
"#qt_calendar_yearedit::up-button:hover{\n"
"    background-color:#55aaff;\n"
"}\n"
"\n"
"/*Style for month select menu ###################*/\n"
"\n"
"#calendarWidget QToolButton QMenu{\n"
"    background-color:#fff;\n"
"}\n"
"\n"
"#calendarWidget QToolButton QMenu::item{\n"
"    /*padding: 5px;*/\n"
"}\n"
"\n"
"#calendarWidget QToolButton QMenu::item:selected:enabled{\n"
"    background-color:#55aaff;\n"
"}\n"
"\n"
"#calendarWidget QToolButton::menu-indicator{\n"
"    /*remove the toolButton arrow*/\n"
"    /*image none;*/\n"
"    nosubcontrol-origin:margin;\n"
"    subcontrol-position:right center;\n"
"    margin-top:10px;\n"
"    width: 20px;\n"
"}\n"
"\n"
"/*Style for calendar table #################*/\n"
"#qt_calendar_calendarview{\n"
"    /*remove the selected dash box*/\n"
"\n"
"    border:2px solid #B8E2FF;\n"
"    border-top:0px;\n"
"    border-bottom-left-radius:5px;\n"
"    border-bottom-right-radius:5px;\n"
"}\n"
"\n"
"\n"
"\n"
"")
        
        self.fix_dateEdit.setMaximumDateTime(QtCore.QDateTime(QtCore.QDate(2031, 12, 31), QtCore.QTime(23, 59, 59)))
        self.fix_dateEdit.setMinimumDateTime(QtCore.QDateTime(QtCore.QDate(2023, 1, 1), QtCore.QTime(0, 0, 0)))
        self.fix_dateEdit.setCalendarPopup(True)
        self.fix_dateEdit.setCurrentSectionIndex(0)
        self.fix_dateEdit.setObjectName("fix_dateEdit")
        '''
        self.fix_dateEdit = QtWidgets.QLabel(self.centralwidget)
        self.fix_dateEdit.setGeometry(QtCore.QRect(567, 45, 181, 51))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(23)
        self.fix_dateEdit.setFont(font)
        #self.fix_dateEdit.setCurrentSectionIndex(0)
        self.fix_dateEdit.setObjectName("fix_dateEdit")
        self.graph_widget = QtWidgets.QWidget(self.centralwidget)
        self.graph_widget.setGeometry(QtCore.QRect(410, 190, 171, 151))
        self.graph_widget.setStyleSheet("")
        self.graph_widget.setObjectName("graph_widget")
        self.fix_label1_1 = QtWidgets.QLabel(self.graph_widget)
        self.fix_label1_1.setGeometry(QtCore.QRect(20, -10, 141, 61))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(-1)
        self.fix_label1_1.setFont(font)
        self.fix_label1_1.setStyleSheet("font-size:20px;")
        self.fix_label1_1.setAlignment(QtCore.Qt.AlignCenter)
        self.fix_label1_1.setObjectName("fix_label1_1")
        self.fix_label1_2 = QtWidgets.QLabel(self.graph_widget)
        self.fix_label1_2.setGeometry(QtCore.QRect(120, 100, 41, 61))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(-1)
        self.fix_label1_2.setFont(font)
        self.fix_label1_2.setStyleSheet("font-size:20px;")
        self.fix_label1_2.setAlignment(QtCore.Qt.AlignCenter)
        self.fix_label1_2.setObjectName("fix_label1_2")
        self.now_grade = QtWidgets.QLabel(self.graph_widget)
        self.now_grade.setGeometry(QtCore.QRect(30, 60, 86, 75))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(-1)
        self.now_grade.setFont(font)
        self.now_grade.setStyleSheet("font-size:80px;")
        self.now_grade.setAlignment(QtCore.Qt.AlignCenter)
        self.now_grade.setObjectName("now_grade")
        self.fix_label1 = QtWidgets.QLabel(self.centralwidget)
        self.fix_label1.setGeometry(QtCore.QRect(380, 160, 231, 221))
        self.fix_label1.setStyleSheet("border-radius:20px;\n"
"background-color: rgb(255,255,255);\n"
"border: 1px solid rgb(216, 216, 216);")
        self.fix_label1.setText("")
        self.fix_label1.setObjectName("fix_label1")
        self.fix_label2 = QtWidgets.QLabel(self.centralwidget)
        self.fix_label2.setGeometry(QtCore.QRect(650, 160, 231, 221))
        self.fix_label2.setStyleSheet("border-radius:20px;\n"
"background-color: rgb(255,255,255);\n"
"border: 1px solid rgb(216, 216, 216);")
        self.fix_label2.setText("")
        self.fix_label2.setObjectName("fix_label2")
        self.fix_label3 = QtWidgets.QLabel(self.centralwidget)
        self.fix_label3.setGeometry(QtCore.QRect(920, 160, 231, 221))
        self.fix_label3.setStyleSheet("border-radius:20px;\n"
"background-color: rgb(255,255,255);\n"
"border: 1px solid rgb(216, 216, 216);")
        self.fix_label3.setText("")
        self.fix_label3.setObjectName("fix_label3")
        self.fix_label5 = QtWidgets.QLabel(self.centralwidget)
        self.fix_label5.setGeometry(QtCore.QRect(530, 37, 421, 71))
        self.fix_label5.setStyleSheet("border-radius:20px;\n"
"background-color: rgb(255,255,255);\n"
"border: 1px solid rgb(216, 216, 216);")
        self.fix_label5.setText("")
        self.fix_label5.setObjectName("fix_label5")
        self.detailtrai_button = QtWidgets.QPushButton(self.centralwidget)
        self.detailtrai_button.setGeometry(QtCore.QRect(1070, 630, 171, 41))
        self.detailtrai_button.setStyleSheet("background-color: rgba(255, 255, 255,0);")
        self.detailtrai_button.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/detailtrain_button.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.detailtrai_button.setIcon(icon)
        self.detailtrai_button.setIconSize(QtCore.QSize(190, 50))
        self.detailtrai_button.setObjectName("detailtrai_button")
        self.fix_label7 = QtWidgets.QLabel(self.centralwidget)
        self.fix_label7.setGeometry(QtCore.QRect(1050, 620, 201, 61))
        self.fix_label7.setStyleSheet("border-radius:10px;\n"
"background-color: rgb(255, 255, 255)")
        self.fix_label7.setText("")
        self.fix_label7.setObjectName("fix_label7")
        self.predict_grade = QtWidgets.QLabel(self.centralwidget)
        self.predict_grade.setGeometry(QtCore.QRect(630, 450, 51, 61))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(-1)
        self.predict_grade.setFont(font)
        self.predict_grade.setStyleSheet("font-size:60px;background-color:rgba(255,255,255,0);")
        self.predict_grade.setAlignment(QtCore.Qt.AlignCenter)
        self.predict_grade.setObjectName("predict_grade")
        self.graph_widget_2 = QtWidgets.QWidget(self.centralwidget)
        self.graph_widget_2.setGeometry(QtCore.QRect(680, 190, 171, 151))
        self.graph_widget_2.setStyleSheet("")
        self.graph_widget_2.setObjectName("graph_widget_2")
        self.fix_label2_1 = QtWidgets.QLabel(self.graph_widget_2)
        self.fix_label2_1.setGeometry(QtCore.QRect(20, -10, 141, 61))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(-1)
        self.fix_label2_1.setFont(font)
        self.fix_label2_1.setStyleSheet("font-size:20px;")
        self.fix_label2_1.setAlignment(QtCore.Qt.AlignCenter)
        self.fix_label2_1.setObjectName("fix_label2_1")
        self.fix_label2_2 = QtWidgets.QLabel(self.graph_widget_2)
        self.fix_label2_2.setGeometry(QtCore.QRect(110, 110, 41, 41))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(-1)
        self.fix_label2_2.setFont(font)
        self.fix_label2_2.setStyleSheet("font-size:20px;")
        self.fix_label2_2.setAlignment(QtCore.Qt.AlignCenter)
        self.fix_label2_2.setObjectName("fix_label2_2")
        self.ground = QtWidgets.QLabel(self.graph_widget_2)
        self.ground.setGeometry(QtCore.QRect(50, 40, 71, 81))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(-1)
        self.ground.setFont(font)
        self.ground.setStyleSheet("font-size:80px;")
        self.ground.setAlignment(QtCore.Qt.AlignCenter)
        self.ground.setObjectName("ground")
        self.graph_widget_3 = QtWidgets.QWidget(self.centralwidget)
        self.graph_widget_3.setGeometry(QtCore.QRect(950, 190, 171, 151))
        self.graph_widget_3.setStyleSheet("")
        self.graph_widget_3.setObjectName("graph_widget_3")
        self.fix_label3_1 = QtWidgets.QLabel(self.graph_widget_3)
        self.fix_label3_1.setGeometry(QtCore.QRect(10, -10, 151, 61))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(-1)
        self.fix_label3_1.setFont(font)
        self.fix_label3_1.setStyleSheet("font-size:20px;")
        self.fix_label3_1.setAlignment(QtCore.Qt.AlignCenter)
        self.fix_label3_1.setObjectName("fix_label3_1")
        self.fix_label3_2 = QtWidgets.QLabel(self.graph_widget_3)
        self.fix_label3_2.setGeometry(QtCore.QRect(130, 110, 31, 41))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(-1)
        self.fix_label3_2.setFont(font)
        self.fix_label3_2.setStyleSheet("font-size:20px;")
        self.fix_label3_2.setAlignment(QtCore.Qt.AlignCenter)
        self.fix_label3_2.setObjectName("fix_label3_2")
        self.time = QtWidgets.QLabel(self.graph_widget_3)
        self.time.setGeometry(QtCore.QRect(20, 40, 141, 81))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(-1)
        self.time.setFont(font)
        self.time.setStyleSheet("font-size:80px;")
        self.time.setAlignment(QtCore.Qt.AlignCenter)
        self.time.setObjectName("time")
        self.fix_label4_1 = QtWidgets.QLabel(self.centralwidget)
        self.fix_label4_1.setGeometry(QtCore.QRect(310, 450, 311, 61))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(-1)
        self.fix_label4_1.setFont(font)
        self.fix_label4_1.setStyleSheet("font-size:40px;background-color:rgba(255,255,255,0);")
        self.fix_label4_1.setAlignment(QtCore.Qt.AlignCenter)
        self.fix_label4_1.setObjectName("fix_label4_1")
        self.fix_label4_2 = QtWidgets.QLabel(self.centralwidget)
        self.fix_label4_2.setGeometry(QtCore.QRect(310, 520, 341, 61))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(-1)
        self.fix_label4_2.setFont(font)
        self.fix_label4_2.setStyleSheet("font-size:40px;background-color:rgba(255,255,255,0);")
        self.fix_label4_2.setAlignment(QtCore.Qt.AlignCenter)
        self.fix_label4_2.setObjectName("fix_label4_2")
        self.train_num1 = QtWidgets.QLabel(self.centralwidget)
        self.train_num1.setGeometry(QtCore.QRect(660, 520, 81, 61))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(-1)
        self.train_num1.setFont(font)
        self.train_num1.setStyleSheet("font-size:60px;background-color:rgba(255,255,255,0);")
        self.train_num1.setAlignment(QtCore.Qt.AlignCenter)
        self.train_num1.setObjectName("train_num1")
        self.fix_label4_3 = QtWidgets.QLabel(self.centralwidget)
        self.fix_label4_3.setGeometry(QtCore.QRect(750, 50, 191, 41))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(-1)
        self.fix_label4_3.setFont(font)
        self.fix_label4_3.setStyleSheet("font-size:25px;")
        self.fix_label4_3.setAlignment(QtCore.Qt.AlignCenter)
        self.fix_label4_3.setObjectName("fix_label4_3")
        #self.train_num2 = QtWidgets.QLabel(self.centralwidget)
        self.train_num2 = QtWidgets.QComboBox(self.centralwidget)
        self.train_num2.setGeometry(QtCore.QRect(790, 54, 41, 31))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(-1)
        self.train_num2.setFont(font)
        self.train_num2.setStyleSheet("font-size:25px;")
        #self.train_num2.setAlignment(QtCore.Qt.AlignCenter)
        self.train_num2.setObjectName("train_num2")
        self.user_image_label = QtWidgets.QLabel(self.centralwidget)
        self.user_image_label.setGeometry(QtCore.QRect(40, 30, 41, 41))
        self.user_image_label.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.user_image_label.setText("")
        self.user_image_label.setPixmap(QtGui.QPixmap("images/user (1).png"))
        self.user_image_label.setScaledContents(True)
        self.user_image_label.setObjectName("user_image_label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(20, 20, 201, 61))
        self.label_2.setStyleSheet("border-radius:10px;\n"
"background-color: rgba(157, 157, 157, 45)")
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.home_button = QtWidgets.QPushButton(self.centralwidget)
        self.home_button.setGeometry(QtCore.QRect(40, 200, 161, 31))
        self.home_button.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.home_button.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("images/home.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.home_button.setIcon(icon1)
        self.home_button.setIconSize(QtCore.QSize(190, 50))
        self.home_button.setObjectName("home_button")
        self.logout_button = QtWidgets.QPushButton(self.centralwidget)
        self.logout_button.setGeometry(QtCore.QRect(30, 315, 191, 51))
        self.logout_button.setStyleSheet("background-color:rgba(255, 255, 255, 0);")
        self.logout_button.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/logout.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.logout_button.setIcon(icon)
        self.logout_button.setIconSize(QtCore.QSize(190, 50))
        self.logout_button.setObjectName("logout_button")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(-30, -20, 1201, 720))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("images/background (2).png"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.start_button = QtWidgets.QPushButton(self.centralwidget)
        self.start_button.setGeometry(QtCore.QRect(50, 490, 161, 161))
        self.start_button.setStyleSheet("background-color:rgba(0, 0, 0, 0);")
        self.start_button.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("images/icon_btn_start_basic.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.start_button.setIcon(icon2)
        self.start_button.setIconSize(QtCore.QSize(150, 150))
        self.start_button.setObjectName("start_button_2")
        # self.user_label = QtWidgets.QLabel(self.centralwidget)
        self.user_label = QtWidgets.QPushButton(self.centralwidget)
        self.user_label.setGeometry(QtCore.QRect(100, 35, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(18)
        font.setBold(False)
        font.setWeight(50)
        self.user_label.setFont(font)
        self.user_label.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        #self.user_label.setAlignment(QtCore.Qt.AlignCenter)
        self.user_label.setObjectName("user_label")
        self.result_button = QtWidgets.QPushButton(self.centralwidget)
        self.result_button.setGeometry(QtCore.QRect(40, 260, 161, 31))
        self.result_button.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.result_button.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("images/trainresult.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.result_button.setIcon(icon4)
        self.result_button.setIconSize(QtCore.QSize(190, 50))
        self.result_button.setObjectName("result_button")

        ###############################################################
        self.start_button.enterEvent = lambda event: self.start_button_enter_event(event)
        self.start_button.leaveEvent = lambda event: self.start_button_leave_event(event)
        self.home_button.clicked.connect(lambda: self.move_to_home(userID))
        self.result_button.clicked.connect(lambda: self.move_to_result(userID))
        self.start_button.clicked.connect(lambda: self.move_to_train(userID))
        self.detailtrai_button.clicked.connect(lambda: self.move_to_traindetail(userID))
        self.user_label.clicked.connect(lambda: self.move_to_userInform(userID))
        self.logout_button.clicked.connect(self.move_to_Login)
        #self.fix_dateEdit.dateChanged.connect(lambda: self.calinder_change(userID))
        ###############################################################


        self.label.raise_()
        self.label_2.raise_()
        self.fix_lable8.raise_()
        self.fix_label2.raise_()
        self.fix_label_image.raise_()
        self.fix_label1.raise_()
        self.graph_widget.raise_()
        self.fix_label3.raise_()
        self.fix_label5.raise_()
        self.fix_dateEdit.raise_()
        self.fix_label7.raise_()
        self.detailtrai_button.raise_()
        self.predict_grade.raise_()
        self.graph_widget_2.raise_()
        self.graph_widget_3.raise_()
        self.fix_label4_1.raise_()
        self.fix_label4_2.raise_()
        self.train_num1.raise_()
        self.fix_label4_3.raise_()
        self.train_num2.raise_()
        self.user_image_label.raise_()
        self.home_button.raise_()
        self.start_button.raise_()
        self.user_label.raise_()
        self.result_button.raise_()
        self.logout_button.raise_()
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow, userID, date)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow, userID, date):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Trainresult"))
        self.fix_label1_1.setText(_translate("MainWindow", "현재 균형 등급"))
        self.fix_label1_2.setText(_translate("MainWindow", "등급"))
        self.now_grade.setText(_translate("MainWindow", "4"))
        self.predict_grade.setText(_translate("MainWindow", "4"))
        self.fix_label2_1.setText(_translate("MainWindow", "땅에 닿은 횟수"))
        self.fix_label2_2.setText(_translate("MainWindow", "회"))
        self.ground.setText(_translate("MainWindow", "3"))
        self.fix_label3_1.setText(_translate("MainWindow", "안정적으로 유지"))
        self.fix_label3_2.setText(_translate("MainWindow", "초"))
        self.time.setText(_translate("MainWindow", "31"))
        self.fix_label4_1.setText(_translate("MainWindow", "예측 균형 등급 :"))
        self.fix_label4_2.setText(_translate("MainWindow", "필요한 훈련 횟수:"))
        self.train_num1.setText(_translate("MainWindow", "16"))
        self.fix_label4_3.setText(_translate("MainWindow", "/           회차 훈련"))
        #self.train_num2.setText(_translate("MainWindow", "14"))
        self.user_label.setText(_translate("MainWindow", "사용자"))
        self.user_date(userID, date)
        self.train_num2.currentIndexChanged.connect(lambda: self.label_setting(userID))

    # 나이 계산하기
    def calculate_age(self, birth_date):
        # 현재 날짜 구하기
        current_date = datetime.now()

        # 생년월일을 datetime 객체로 변환
        birth_date = datetime.strptime(birth_date, '%Y-%m-%d')

        # 현재 나이 계산
        age = current_date.year - birth_date.year - (
                (current_date.month, current_date.day) < (birth_date.month, birth_date.day))

        return age

    # ID를 통해 이름 텍스트 파일에 입력
    def user_date(self, userID, date):
        global count_list

        # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        # 쿼리 실행
        cursor.execute("SELECT * FROM user WHERE ID = ?", (userID,))
        row = cursor.fetchall()
        print(row)

        str_date = str(date)

        self.user_label.setText(row[0][1])
        year, month, date = map(int, str(date).split('-'))
        #self.fix_dateEdit.setDate(QDate(year, month, date))
        self.fix_dateEdit.setText(str_date)

        # history의 ID과 해당 날짜가 맞는 쿼리를 실행
        cursor.execute("SELECT ID FROM history WHERE user_id = ? AND Date = ?", (userID, str_date))
        rows = cursor.fetchall()

        count = 1

        count_list.clear()
        self.train_num2.clear()
        for row in rows :
            self.train_num2.addItem(str(count))
            count_list.append(row[0])
            count += 1

        # 쿼리 실행
        cursor.execute("SELECT Grade, addr FROM history WHERE ID = ?", (count_list[0],))
        row = cursor.fetchall()
        print("history_addr : ", row)

        self.now_grade.setText(str(row[0][0]))
        if row[0][0] == 1:
            balance_activity = 1
            self.predict_grade.setText("1")
        else:
            balance_activity = row[0][0] - 1
            self.predict_grade.setText(str(row[0][0] - 1))

        addr = row[0][1]

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/' + addr
        local_path = addr
        sftp.get(remote_path, local_path)
        sftp.close()

        ##############################################
        # 파일로 진행할 함수 사용 예정
        self.read_data_and_calculate()
        ##############################################

        # 모델 함수 불러오기
        self.model_fun(userID, row[0][0], balance_activity)

        # 파일이 존재하는지 확인
        if os.path.exists(addr):
                # 파일 삭제
                os.remove(addr)
                print("파일이 성공적으로 삭제되었습니다.")
        else:
                print("파일이 존재하지 않습니다.")

        # 연결 종료
        conn.close()

        ssh.close()

    # 캘린더 변경되었을 때
    def calinder_change(self, userID):
        global count_list
        #self.train_num2.clear()

        date = self.fix_dateEdit.date()

        str_date = date.toString("yyyy-MM-dd")

        print("calinder change:", str_date)

        # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        # history의 ID과 해당 날짜가 맞는 쿼리를 실행
        cursor.execute("SELECT ID FROM history WHERE user_id = ? AND Date = ?", (userID, str_date))
        rows = cursor.fetchall()

        count = 1

        print("calinder change1 : ", count_list)
        print(f'Initial combo box count1: {self.train_num2.count()}')

        count_list.clear()

        print("calinder change2 : ", count_list)
        print(f'Initial combo box count2: {self.train_num2.count()}')
        self.train_num2.clear()
        print("calinder change3 : ", count_list)
        print(f'Initial combo box count3: {self.train_num2.count()}')
        for row in rows:
                print("row : ", row)
                self.train_num2.addItem(str(count))
                print("calinder change4 : ", count_list)
                print(f'Initial combo box count4: {self.train_num2.count()}')
                count_list.append(row[0])
                count += 1

        # 연결 종료
        conn.close()

        ssh.close()

    # 다른 label setting
    def label_setting(self, userID):
        global count_list

        # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        combo_index = self.train_num2.currentIndex()
        current_history_id = count_list[combo_index]

        # 쿼리 실행
        cursor.execute("SELECT Grade, addr FROM history WHERE ID = ?", (current_history_id,))
        row = cursor.fetchall()
        print("history_addr : ", row)

        self.now_grade.setText(str(row[0][0]))
        if row[0][0] == 1 :
            balance_activity = 1
            self.predict_grade.setText("1")
        else :
            balance_activity = row[0][0] - 1
            self.predict_grade.setText(str(row[0][0] - 1))

        addr = row[0][1]

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/' + addr
        local_path = addr
        sftp.get(remote_path, local_path)
        sftp.close()

        ##############################################
        # 파일로 진행할 함수 사용 예정
        self.read_data_and_calculate()
        ##############################################

        # 모델 함수 불러오기
        self.model_fun(userID, row[0][0], balance_activity)

        # 파일이 존재하는지 확인
        if os.path.exists(addr):
            # 파일 삭제
            os.remove(addr)
            print("파일이 성공적으로 삭제되었습니다.")
        else:
            print("파일이 존재하지 않습니다.")

        # 연결 종료
        conn.close()

        ssh.close()

    # 예측 모델 함수
    def model_fun(self, userID, grade, balance_activity):
        # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        # 쿼리 실행
        cursor.execute("SELECT * FROM user WHERE ID = ?", (userID,))
        row = cursor.fetchall()

        id = userID
        age = self.calculate_age(row[0][2])
        gender = row[0][3]
        height = row[0][4]
        body_fat_percentage = row[0][5]
        disease_grade = 1  # 현재는 db에 값이 없어서 1로 가정하였으나 db에서 추가할 수도 있고, 뺄 수도 있음

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/trained_model_with_balance.pkl'
        local_path_model1 = 'trained_model_with_balance.pkl'
        sftp.get(remote_path, local_path_model1)
        remote_path = '/home/user/test/trained_model_with_balance2.pkl'
        local_path_model2 = 'trained_model_with_balance2.pkl'
        sftp.get(remote_path, local_path_model2)
        sftp.close()

        # 모델을 불러옵니다.
        model1 = joblib.load(local_path_model1)
        model2 = joblib.load(local_path_model2)

        patient_info = np.array([[height, age, gender, body_fat_percentage, balance_activity]])

        # 모델 학습에 사용된 특성 이름 확인
        feature_names_model1 = ['Height_cm', 'Age_years', 'Gender', 'BodyFat_Percent', 'Balance_Activity']
        feature_names_model2 = ['Height_cm', 'Age_years', 'Gender', 'BodyFat_Percent', 'Train_count']

        # 환자 정보를 DataFrame으로 변환, 초기에는 model2에 맞게 설정
        patient_info_df = pd.DataFrame(patient_info, columns=feature_names_model2)

        if grade == 1:
            prediction = 1
        else:
            prediction = grade - 1

        # 환자 정보 중 훈련 횟수의 인덱스, 이 예시에서는 마지막 요소를 의미합니다.
        frequency_index = -1

        # 기존 훈련 횟수 저장
        original_frequency = patient_info[0][frequency_index]

        case = 0

        while True:
            if patient_info[0][frequency_index] > 150:
                # 훈련 횟수가 150을 넘어가면 model1을 사용합니다.
                # 균형활성도를 기준으로 훈련 횟수를 예측하기 위해 데이터프레임을 재구성합니다.
                patient_info_df = pd.DataFrame(patient_info[:, :-1],
                                                   columns=feature_names_model1[:-1])  # 훈련 횟수 제외
                patient_info_df['Balance_Activity'] = prediction  # 예측하고자 하는 균형활성도를 추가합니다.
                current_prediction = model1.predict(patient_info_df)[0]
                case = 2
                break  # 모델 1을 사용하면 바로 반복문을 종료합니다.
            else:
                # 모델 2를 사용하여 훈련 횟수를 예측합니다.
                current_prediction = model2.predict(patient_info_df)[0]
                current_prediction_ceil = math.ceil(current_prediction)
                patient_info_df = pd.DataFrame(patient_info, columns=feature_names_model2)  # 모델2용 데이터프레임

            # 예측값이 입력받은 prediction과 일치하는지 확인합니다.
            if current_prediction_ceil == prediction:
                # print(f"예측 균형활성도: {current_prediction_ceil}, 예상 훈련 횟수: {patient_info[0][frequency_index]}회")
                case = 1
                break
            else:
                # 훈련 횟수를 1 증가시키고 데이터프레임을 갱신합니다.
                patient_info[0][frequency_index] += 1
                patient_info_df = pd.DataFrame(patient_info, columns=feature_names_model2)

        if case == 1:
            if grade == 1:
                self.train_num1.setText("-")
            else:
                remain = patient_info[0][frequency_index] - original_frequency
                if (remain < 1) :
                    self.train_num1.setText(str(1))
                else :
                    self.train_num1.setText(str(int(remain)))
        elif case == 2:
            if grade == 1:
                self.train_num1.setText("-")
            else:
                remain = math.ceil(current_prediction) - original_frequency
                if (remain < 1):
                        self.train_num1.setText(str(1))
                else:
                        self.train_num1.setText(str(int(remain)))

        print(self.train_num1.text())

        # 연결 종료
        conn.close()

        ssh.close()

    # 땅에 닿았을 때와 안정적으로 유지한 시간
    def read_data_and_calculate(self):
        # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        combo_index = self.train_num2.currentIndex()
        current_history_id = count_list[combo_index]

        # 쿼리 실행
        cursor.execute("SELECT Grade, addr FROM history WHERE ID = ?", (current_history_id,))
        row = cursor.fetchall()
        print("history_addr : ", row)

        self.now_grade.setText(str(row[0][0]))
        if row[0][0] == 1:
            balance_activity = 1
            self.predict_grade.setText("1")
        else:
            balance_activity = row[0][0] - 1
            self.predict_grade.setText(str(row[0][0] - 1))

        addr = row[0][1]

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/' + addr
        local_path = addr
        sftp.get(remote_path, local_path)
        sftp.close()

        grade = int(self.now_grade.text())

        if grade >= 10 and grade <= 7 :
            level = 1
        elif grade <= 4 :
            level = 2
        else :
            level = 3


        limits = {1: 8, 2: 10, 3: 12}  # 단계별로 한계치를 10,15,20으로 설정
        limit = limits.get(level, 10)
        ground_count = 0
        max_time_under_5 = 0
        current_time_under_5 = 0

        with open(addr, 'r') as file:
            for line in file:
                x, y = map(float, line.split(','))
                if abs(x) > limit or abs(y) > limit:
                    ground_count += 1
                if abs(x) <= 3 and abs(y) <= 3:
                    current_time_under_5 += 1
                else:
                    max_time_under_5 = max(max_time_under_5, current_time_under_5)
                    current_time_under_5 = 0

        max_time_under_5 = max(max_time_under_5, current_time_under_5)

        self.ground.setText(str(ground_count))
        self.time.setText(str(max_time_under_5))
        print(f"limit를 초과한 횟수: {ground_count}")  # 땅에 닿은 횟수
        print(f"가로 데이터와 세로 데이터의 절대값이 모두 5를 넘지 않은 가장 긴 시간: {max_time_under_5}초")  # 안정적으로 유지한 시간

    # 시작 버튼에 마우스가 올라갔을 때
    def start_button_enter_event(self, event):
        icon = QtGui.QIcon("images/icon_btn_start_hover.png")  # 마우스가 올라갔을 때의 이미지
        self.start_button.setIcon(icon)

    # 시작 버튼에 마우스가 벗어났을 때
    def start_button_leave_event(self, event):
        icon = QtGui.QIcon("images/icon_btn_start_basic.png")  # 마우스가 올라갔을 때의 이미지
        self.start_button.setIcon(icon)

    # 홈 화면으로 이동
    def move_to_home(self, userID):
        try:
            from Home import Home
            # 현재 MainWindow를 새로운 창으로 변경
            self.MainWindow.setWindowTitle("Home")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.home_window = Home(self.MainWindow)
            print(userID)
            self.home_window.setupUi(self.MainWindow, userID)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("trainresult to home error : ", e)

    # 결과 화면으로 이동
    def move_to_result(self, userID):
        try:
            from Calinder import Calinder
            # 현재 MainWindow를 새로운 창으로 변경
            self.MainWindow.setWindowTitle("Result")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.result_window = Calinder(self.MainWindow)
            print(userID)
            self.result_window.setupUi(self.MainWindow, userID)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("trainresult to result error : ", e)

    # 훈련 화면으로 이동
    def move_to_train(self, userID):
        try:
            from Train import Train
            # 현재 MainWindow를 새로운 창으로 변경
            self.MainWindow.setWindowTitle("Result")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.train_window = Train(self.MainWindow)
            print(userID)
            self.train_window.setupUi(self.MainWindow, userID)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("trainresult to train error : ", e)

    # 훈련 화면으로 이동
    def move_to_traindetail(self, userID):
        global count_list
        try:
            from trainresult_detail import trainresult_detail
            # 현재 MainWindow를 새로운 창으로 변경
            self.MainWindow.setWindowTitle("Result")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.resultdetail_window = trainresult_detail(self.MainWindow)
            print(userID)

            index = self.train_num2.currentIndex()
            current_history_id = count_list[index]

            # SSH로 서버에 접속해서 Python 스크립트 실행
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect('192.168.0.40', username='user', password='1234')

            # SSH로 파일 다운로드하여 로컬에서 조회
            sftp = ssh.open_sftp()
            remote_path = '/home/user/test/storedb.db'
            local_path = 'storedb.db'
            sftp.get(remote_path, local_path)
            sftp.close()

            # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
            conn = sqlite3.connect(local_path)
            cursor = conn.cursor()

            # 쿼리 실행
            cursor.execute("SELECT Date FROM history WHERE ID = ?", (current_history_id,))
            row = cursor.fetchall()

            date = row[0][0]

            print(date)
            self.resultdetail_window.setupUi(self.MainWindow, userID, date)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("trainresult to detail error : ", e)

    # 사용자 정보 화면으로 이동
    def move_to_userInform(self, userID):
        try:
            from user_inform_modify import UserInform
            # 현재 MainWindow를 새로운 창으로 변경
            self.MainWindow.setWindowTitle("Result")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.inform_window = UserInform(self.MainWindow)
            print(userID)
            self.inform_window.setupUi(self.MainWindow, userID)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("home to inform error : ", e)

    # 사용자 정보 화면으로 이동
    def move_to_Login(self, userID):
        try:
            from Login import Login
            # 현재 MainWindow를 새로운 창으로 변경
            self.MainWindow.setWindowTitle("Login")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.login_window =  Login(self.MainWindow)
            print(userID)
            self.login_window.setupUi(self.MainWindow)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("trainresult to login error : ", e)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = trainresult(MainWindow)
    current_date = datetime.now().date()
    print(current_date)
    ui.setupUi(MainWindow, 2, '2024-03-04')
    MainWindow.show()
    sys.exit(app.exec_())
