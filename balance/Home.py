# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Home2.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QPushButton
from PyQt5.QtWidgets import QWidget, QVBoxLayout
from PyQt5.QtCore import Qt, QDate
from datetime import datetime
import re
import paramiko
import sqlite3
import numpy as np
import pyqtgraph as pg
import Calinder
import Train
import user_inform_modify
import Login



class CalendarWidget(QtWidgets.QCalendarWidget):
    def __init__(self, parent=None):
        super(CalendarWidget, self).__init__(parent)
        self.date_markers = []  # 날짜에 대한 마커 정보를 저장할 리스트
        #self.date_markers = {}  # 날짜에 대한 마커 정보를 저장할 리스트

    def paintCell(self, painter, rect, date):
        super(CalendarWidget, self).paintCell(painter, rect, date)

        # 저장된 날짜에 대한 마커를 그립니다.
        for marker_date, marker_color in self.date_markers:
            if date == marker_date:
                painter.setBrush(marker_color)
                painter.drawEllipse(rect.center(), 8, 8)

class Home(object):
    def __init__(self, main_window):
        self.MainWindow = main_window

    def setupUi(self, MainWindow, userID):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1280, 720)
        MainWindow.setStyleSheet("background-color:rgb(255, 255, 255);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(-30, 0, 1201, 720))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("images/background (2).png"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        #self.user_label = QtWidgets.QLabel(self.centralwidget)
        self.user_label = QtWidgets.QPushButton(self.centralwidget)
        self.user_label.setGeometry(QtCore.QRect(95, 55, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(18)
        font.setBold(False)
        font.setWeight(50)
        self.user_label.setFont(font)
        self.user_label.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        #self.user_label.setAlignment(QtCore.Qt.AlignCenter)
        self.user_label.setObjectName("user_label")
        self.user_image_label = QtWidgets.QLabel(self.centralwidget)
        self.user_image_label.setGeometry(QtCore.QRect(40, 50, 41, 41))
        self.user_image_label.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.user_image_label.setText("")
        self.user_image_label.setPixmap(QtGui.QPixmap("images/user (1).png"))
        self.user_image_label.setScaledContents(True)
        self.user_image_label.setObjectName("user_image_label")
        self.home_button = QtWidgets.QPushButton(self.centralwidget)
        self.home_button.setGeometry(QtCore.QRect(40, 220, 161, 31))
        self.home_button.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.home_button.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/home.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.home_button.setIcon(icon)
        self.home_button.setIconSize(QtCore.QSize(190, 50))
        self.home_button.setObjectName("home_button")
        self.result_button = QtWidgets.QPushButton(self.centralwidget)
        self.result_button.setGeometry(QtCore.QRect(40, 280, 161, 31))
        self.result_button.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.result_button.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("images/trainresult.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.result_button.setIcon(icon1)
        self.result_button.setIconSize(QtCore.QSize(190, 50))
        self.result_button.setObjectName("result_button")
        self.logout_button = QtWidgets.QPushButton(self.centralwidget)
        self.logout_button.setGeometry(QtCore.QRect(30, 335, 191, 51))
        self.logout_button.setStyleSheet("background-color:rgba(255, 255, 255, 0);")
        self.logout_button.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/logout.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.logout_button.setIcon(icon)
        self.logout_button.setIconSize(QtCore.QSize(190, 50))
        self.logout_button.setObjectName("logout_button")
        self.fix_label_1 = QtWidgets.QLabel(self.centralwidget)
        self.fix_label_1.setGeometry(QtCore.QRect(320, 530, 251, 71))
        self.fix_label_1.setStyleSheet("border: 1px solid rgb(216, 216, 216);;\n"
"border-radius:10px;\n"
"background-color:rgb(237, 243, 254);")
        self.fix_label_1.setText("")
        self.fix_label_1.setObjectName("fix_label_1")
        self.fix_label_2 = QtWidgets.QLabel(self.centralwidget)
        self.fix_label_2.setGeometry(QtCore.QRect(320, 536, 131, 61))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(18)
        font.setBold(False)
        font.setWeight(50)
        self.fix_label_2.setFont(font)
        self.fix_label_2.setStyleSheet("background-color:rgba(0,0,0,0)")
        self.fix_label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.fix_label_2.setObjectName("fix_label_2")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(450, 537, 2, 58))
        self.line.setStyleSheet("color: rgb(52, 163, 163);\n"
"border: 1px solid rgb(200,200,200);")
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        # self.graph_widget = QtWidgets.QWidget(self.centralwidget)
        self.graph_widget = QtWidgets.QScrollArea(self.centralwidget)
        self.graph_widget.setGeometry(QtCore.QRect(330, 100, 521, 341))
        self.graph_widget.setStyleSheet("")
        self.graph_widget.setObjectName("graph_widget")
        # self.calendarWidget = QtWidgets.QCalendarWidget(self.centralwidget)
        self.calendarWidget = CalendarWidget(self.centralwidget)  # Customized Calendar Widget
        self.calendarWidget.setGeometry(QtCore.QRect(940, 100, 281, 291))
        self.calendarWidget.setStyleSheet("color:rgb(0, 0, 0);")
        self.calendarWidget.setVerticalHeaderFormat(QtWidgets.QCalendarWidget.NoVerticalHeader)
        self.calendarWidget.setObjectName("calendarWidget")
        self.fix_label = QtWidgets.QLabel(self.centralwidget)
        self.fix_label.setGeometry(QtCore.QRect(20, 40, 201, 61))
        self.fix_label.setStyleSheet("border-radius:10px;\n"
"background-color: rgba(157, 157, 157, 45)")
        self.fix_label.setText("")
        self.fix_label.setObjectName("fix_label")
        self.difference_grade_label = QtWidgets.QLabel(self.centralwidget)
        self.difference_grade_label.setGeometry(QtCore.QRect(520, 548, 41, 41))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(16)
        font.setBold(False)
        font.setWeight(50)
        font.setKerning(True)
        self.difference_grade_label.setFont(font)
        self.difference_grade_label.setMouseTracking(False)
        self.difference_grade_label.setStyleSheet("background-color:rgba(0,0,0,0);\n"
"color:green;")
        self.difference_grade_label.setAlignment(QtCore.Qt.AlignCenter)
        self.difference_grade_label.setObjectName("difference_grade_label")
        self.fix_label_5 = QtWidgets.QLabel(self.centralwidget)
        self.fix_label_5.setGeometry(QtCore.QRect(910, 70, 341, 351))
        self.fix_label_5.setStyleSheet("border-radius:20px;\n"
"background-color: rgb(255,255,255);border: 1px solid rgb(216, 216, 216);")
        self.fix_label_5.setText("")
        self.fix_label_5.setObjectName("fix_label_5")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(910, 440, 341, 251))
        self.label_5.setStyleSheet("border-radius:20px;\n"
"background-color: rgb(255,255,255);border: 1px solid rgb(216, 216, 216);")
        self.label_5.setText("")
        self.label_5.setObjectName("label_5")
        self.fix_label_4 = QtWidgets.QLabel(self.centralwidget)
        self.fix_label_4.setGeometry(QtCore.QRect(300, 70, 581, 401))
        self.fix_label_4.setStyleSheet("border-radius:20px;\n"
"background-color: rgb(255,255,255);\n"
"border: 1px solid rgb(216, 216, 216);")
        self.fix_label_4.setText("")
        self.fix_label_4.setObjectName("fix_label_4")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(260, 0, 1071, 721))
        self.label_7.setStyleSheet("background-color:rgb(240,240,240);")
        self.label_7.setText("")
        self.label_7.setScaledContents(False)
        self.label_7.setObjectName("label_7")
        self.now_grade_label = QtWidgets.QLabel(self.centralwidget)
        self.now_grade_label.setGeometry(QtCore.QRect(478, 535, 31, 61))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(28)
        font.setBold(False)
        font.setWeight(50)
        self.now_grade_label.setFont(font)
        self.now_grade_label.setStyleSheet("background-color:rgba(0,0,0,0)")
        self.now_grade_label.setAlignment(QtCore.Qt.AlignCenter)
        self.now_grade_label.setObjectName("now_grade_label")
        self.start_button = QtWidgets.QPushButton(self.centralwidget)
        self.start_button.setGeometry(QtCore.QRect(50, 520, 161, 161))
        self.start_button.setStyleSheet("background-color:rgba(0, 0, 0, 0);")
        self.start_button.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("images/icon_btn_start_basic.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.start_button.setIcon(icon3)
        self.start_button.setIconSize(QtCore.QSize(150, 150))
        self.start_button.setObjectName("start_button")
        self.listView = QtWidgets.QListView(self.centralwidget)
        self.listView.setGeometry(QtCore.QRect(940, 465, 281, 201))
        self.listView.setObjectName("listView")

        ################################################
        self.start_button.enterEvent = lambda event: self.start_button_enter_event(event)
        self.start_button.leaveEvent = lambda event: self.start_button_leave_event(event)
        self.populate_calendar(userID)
        self.result_button.clicked.connect(lambda: self.move_to_result(userID))
        self.start_button.clicked.connect(lambda: self.move_to_train(userID))
        self.user_label.clicked.connect(lambda: self.move_to_userInform(userID))
        self.logout_button.clicked.connect(self.move_to_Login)
        ################################################

        self.label.raise_()
        self.label_7.raise_()
        self.home_button.raise_()
        self.result_button.raise_()
        self.fix_label_1.raise_()
        self.fix_label_2.raise_()
        self.line.raise_()
        self.fix_label.raise_()
        self.user_image_label.raise_()
        self.user_label.raise_()
        self.difference_grade_label.raise_()
        self.fix_label_5.raise_()
        self.calendarWidget.raise_()
        self.label_5.raise_()
        self.fix_label_4.raise_()
        self.graph_widget.raise_()
        self.now_grade_label.raise_()
        self.start_button.raise_()
        self.listView.raise_()
        self.logout_button.raise_()
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow, userID)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow, userID):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Home"))
        self.user_label.setText(_translate("MainWindow", "사용자"))
        self.fix_label_2.setText(_translate("MainWindow", "현재 등급"))
        self.difference_grade_label.setText(_translate("MainWindow", "(+3)"))
        self.now_grade_label.setText(_translate("MainWindow", "5"))
        self.label_setting(userID)
        self.graph_setting(userID)
        self.list_data_add(userID)

    def label_setting(self, userID):
        # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        # 쿼리 실행
        cursor.execute("SELECT * FROM user WHERE ID = ?", (userID,))
        row = cursor.fetchall()

        print(row)

        self.user_label.setText(row[0][1])

        # 쿼리 실행
        cursor.execute("SELECT * FROM history WHERE user_id = ? ORDER BY Grade", (userID,))
        rows = cursor.fetchall()


        print(rows)

        if rows == [] :
            self.now_grade_label.setText(str(10))
            self.difference_grade_label.setText("(+" + str(0) + ")")
        else :
            self.now_grade_label.setText(str(rows[0][2]))
            difference = rows[0][2] - rows[len(rows) - 1][2]
            if difference < 0 :
                self.difference_grade_label.setText("(+" + str(-difference) + ")")
            else :
                self.difference_grade_label.setText("(" + str(-difference) + ")")


    # 캘린더에 정보 표시
    def populate_calendar(self, userID):
        # 데이터베이스에서 해당 사용자의 날짜를 가져옵니다.
        db_dates = self.get_dates_from_database(userID)

        # 캘린더에 날짜를 표시하는 방식으로 수정합니다.
        for date_str in db_dates:
            year, month, day = map(int, date_str.split("-"))
            date = QtCore.QDate(year, month, day)
            self.calendarWidget.date_markers.append((date, QtGui.QColor(Qt.red)))
            # date_key = date.toString("yyyy-MM-dd")
            # self.calendarWidget.addMarker(date_key, QtGui.QColor(Qt.red))
        self.calendarWidget.update()

    def get_dates_from_database(self, userID):
        # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        # 쿼리 실행
        cursor.execute("SELECT Date FROM history WHERE user_id = ? ORDER BY Date DESC", (userID,))
        rows = cursor.fetchall()

        date_list = []

        if not rows :
            return date_list

        for row in rows :
            date_list.append(row[0])

        print(date_list)
        return date_list

    def graph_setting(self, userID):
        grade_list = []
        date_list = []

        # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        # 쿼리 실행
        cursor.execute("SELECT Grade, Date FROM history WHERE user_id = ?", (userID,))
        rows = cursor.fetchall()
        for row in rows:
            grade_list.append(row[0])
            date_list.append(row[1])

        # 그래프 그리기
        pg.setConfigOption('background', 'w')  # 그래프 배경색 설정
        pg.setConfigOption('foreground', 'k')  # 그래프 전경색 설정

        plot_widget = pg.PlotWidget()
        plot_widget.setBackground('w')  # 그래프 배경색 설정
        plot_widget.setTitle('시간별 균형활성도 변화량')
        plot_widget.setLabel('left', '균형활성도')
        plot_widget.setLabel('bottom', '날짜')

        # 날짜를 숫자 인덱스로 변환
        x_values = np.arange(len(date_list))
        y_values = np.array(range(1, 6))

        # 막대그래프 아이템 생성
        #bars = pg.BarGraphItem(x=x_values, height=grade_list, width=0.6, brush=(241, 60, 230))

        curve = pg.PlotCurveItem(x=x_values, y=grade_list, pen=(241, 60, 230))

        # 그래프에 막대그래프 아이템 추가
        #plot_widget.addItem(bars)
        plot_widget.addItem(curve)

        print(date_list)

        # x 축 레이블 설정
        tick_positions = []  # 월을 표시할 위치를 저장할 리스트
        tick_labels = []  # 각 위치에 표시할 레이블을 저장할 리스트
        prev_month = None  # 이전 월을 저장할 변수
        for i, date in enumerate(date_list):
            current_month = datetime.strptime(date, "%Y-%m-%d").strftime("%m")
            if current_month != prev_month:  # 월이 바뀔 때마다 월을 표시함
                tick_positions.append(i)  # 월을 표시할 위치 저장
                tick_labels.append(datetime.strptime(date, "%Y-%m-%d").strftime("%m/%d"))  # 월을 표시할 레이블 저장
                prev_month = current_month  # 이전 월 업데이트
            elif i == 0:  # 첫번째 날짜에는 항상 월을 표시함
                tick_positions.append(i)  # 월을 표시할 위치 저장
                tick_labels.append(datetime.strptime(date, "%Y-%m-%d").strftime("%m/%d"))  # 월을 표시할 레이블 저장
            else:
                tick_positions.append(i)  # 월을 표시할 위치 저장
                tick_labels.append(datetime.strptime(date, "%Y-%m-%d").strftime("%d"))  # 월을 표시할 레이블 저장
        # x 축에 월 표시
        plot_widget.getAxis('bottom').setTicks(
            [[(tick_positions[i], tick_labels[i]) for i in range(len(tick_positions))]])

        # 연결 종료
        conn.close()
        ssh.close()

        # 그래프를 QLabel에 표시
        canvas = QWidget()  # PyQt5에서는 QWidget을 사용
        layout = QVBoxLayout(canvas)
        layout.addWidget(plot_widget)
        self.graph_widget.setWidget(canvas)
        self.graph_widget.setWidgetResizable(True)

    # list widget에 현재 사용자의 이력 추가
    def list_data_add(self, userID):
        date_list = []

        # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        # 쿼리 실행
        cursor.execute("SELECT addr FROM history WHERE user_id = ?", (userID,))
        rows = cursor.fetchall()
        for row in rows:
            # 정규 표현식을 사용하여 날짜와 시간을 추출
            pattern = r'(\d{4})_(\d{2})_(\d{2})_(\d{2})_(\d{2})_(\d{2})'
            if row[0] and row[0].strip():
                match = re.search(pattern, row[0])

                if match:
                    # 추출된 날짜와 시간을 문자열로 가져오기
                    date_time_groups = match.groups()[0:6]  # 정규 표현식의 그룹 중 첫 번째 6개를 가져옴
                    date_time_str = '_'.join(date_time_groups)

                    # 추출된 날짜와 시간을 datetime 객체로 변환
                    date_time_obj = datetime.strptime(date_time_str, '%Y_%m_%d_%H_%M_%S')

                    # 변환된 형식을 list widget에 추가
                    date_str = date_time_obj.strftime('%Y-%m-%d %H:%M:%S')  # datetime 객체를 문자열로 변환
                    date_list.append(date_str)
                else:
                    print("날짜와 시간을 찾을 수 없습니다.")

        # 데이터 모델 생성
        self.model = QtCore.QStringListModel()

        # 데이터 모델에 데이터 추가
        self.model.setStringList(date_list)

        # QListView에 데이터 모델 설정
        self.listView.setModel(self.model)
        # QListView에 포함된 텍스트의 글자 크기 설정
        self.listView.setStyleSheet(
            "background-color:rgb(255,255,255);font-size: 12pt;")  # 글자 크기를 12pt로 설정 (원하는 크기로 변경 가능)

        # QListView에 데이터 모델 설정
        self.listView.setModel(self.model)

        # 선택 모델 설정
        selection_model = self.listView.selectionModel()

        # 연결 종료
        conn.close()

        ssh.close()

    # 시작 버튼에 마우스가 올라갔을 때
    def start_button_enter_event(self, event):
        icon = QtGui.QIcon("images/icon_btn_start_hover.png")  # 마우스가 올라갔을 때의 이미지
        self.start_button.setIcon(icon)

    # 시작 버튼에 마우스가 벗어났을 때
    def start_button_leave_event(self, event):
        icon = QtGui.QIcon("images/icon_btn_start_basic.png")
        self.start_button.setIcon(icon)


    # 결과 화면으로 이동
    def move_to_result(self, userID):
        try:
            from Calinder import Calinder
            # 현재 MainWindow를 새로운 창으로 변경
            self.MainWindow.setWindowTitle("Result")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.result_window = Calinder(self.MainWindow)
            print(userID)
            self.result_window.setupUi(self.MainWindow, userID)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("home to result error : ", e)

    # 훈련 화면으로 이동
    def move_to_train(self, userID):
        try:
            from Train import Train
            # 현재 MainWindow를 새로운 창으로 변경
            self.MainWindow.setWindowTitle("Result")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.train_window = Train(self.MainWindow)
            print(userID)
            self.train_window.setupUi(self.MainWindow, userID)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("home to train error : ", e)

    # 훈련 화면으로 이동
    def move_to_userInform(self, userID):
        try:
            from user_inform_modify import UserInform
            # 현재 MainWindow를 새로운 창으로 변경
            self.MainWindow.setWindowTitle("Result")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.inform_window = UserInform(self.MainWindow)
            print(userID)
            self.inform_window.setupUi(self.MainWindow, userID)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("home to inform error : ", e)

    # 사용자 정보 화면으로 이동
    def move_to_Login(self):
        try:
            from Login import Login
            # 현재 MainWindow를 새로운 창으로 변경
            self.MainWindow.setWindowTitle("Login")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.login_window = Login(self.MainWindow)
            #print(userID)
            self.login_window.setupUi(self.MainWindow)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("doctor_user_inform to login error : ", e)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Home(MainWindow)
    ui.setupUi(MainWindow, 2)
    MainWindow.show()
    sys.exit(app.exec_())
