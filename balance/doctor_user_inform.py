# -*- coding: utf-8 -*-
import datetime

import numpy as np
import pyqtgraph as pg
# Form implementation generated from reading ui file 'doctor_user_inform.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import paramiko
import sqlite3
from PyQt5.QtWidgets import QListWidgetItem, QWidget, QVBoxLayout
from PyQt5.QtGui import QFont
from PyQt5.QtGui import QStandardItemModel, QStandardItem
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import QMessageBox
import doctor_write
import docter_search
import Login



docterid=1
userid=4

request_list = []
complete_list = []
comment_ID = 0

class doctor_user_inform(object):
    #내가 넣음###########################################################################
    def __init__(self, main_window):
        self.MainWindow = main_window

    def fetch_user_names(self, doctorID, userID):
        global request_list, complete_list
        # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        # 쿼리 실행 (Name과 Birth 열만 선택)
        cursor.execute("""
                            SELECT c.ID, u.Name, u.Birth 
                            FROM user u 
                            JOIN coment c ON u.ID = c.user_id 
                            WHERE u.ID = ? AND u.Docid = ? AND c.coment IS NULL;
                        """, (userID, doctorID,))
        rows = cursor.fetchall()

        model = QStandardItemModel()
        
        font = QFont()
        font.setFamily("Noto Sans KR Medium") 
        for row in rows:
                ID, name, birth = row
                request_list.append((ID, f"이름: {name}, 생년월일: {birth}"))
                item = QStandardItem(f"이름: {name}, 생년월일: {birth}")
                item.setFont(font)  # 폰트 설정 적용
                model.appendRow(item)
        self.label_4.setModel(model)

        # 쿼리 실행 (Name과 Birth 열만 선택)
        cursor.execute("""
                            SELECT c.ID, u.Name, u.Birth 
                            FROM user u 
                            JOIN coment c ON u.ID = c.user_id 
                            WHERE u.ID = ? AND u.Docid = ? AND c.coment IS NOT NULL;
                        """, (userID, doctorID,))
        rows = cursor.fetchall()

        model = QStandardItemModel()
        
        font = QFont()
        font.setFamily("Noto Sans KR Medium") 
        for row in rows:
                ID, name, birth = row
                complete_list.append((ID, f"이름: {name}, 생년월일: {birth}"))
                item = QStandardItem(f"이름: {name}, 생년월일: {birth}")
                item.setFont(font)  # 폰트 설정 적용
                model.appendRow(item)
        self.label_5.setModel(model)
        print("complete list : ", complete_list)

        # 연결 종료
        conn.close()
        ssh.close()

    def handle_label_4_clicked(self, index):
        global request_list, complete_list, comment_ID

        selected_item = self.label_4.selectedIndexes()
        # print(selected_item)
        if selected_item is not None:
            selected_text = selected_item[0].data()
            select_index = selected_item[0].row()  # 선택된 항목의 행 인덱스 가져오기
            print(f"Selected row: {index}")
            print("complete selected_text: ", selected_text)
            index, name = request_list[select_index]
            comment_ID = index
            '''
            item_text = selected_item.text()  # 클릭된 항목의 텍스트 정보
            # 텍스트 정보에서 이름과 생년월일 추출
            name = item_text.split(',')[0].split(': ')[1].strip()
            birth = item_text.split(',')[1].split(': ')[1].strip()
            # 추출한 정보를 변수에 저장
            self.selected_name = name
            self.selected_birth = birth

            conn = sqlite3.connect('storedb.db')
            cursor = conn.cursor()

            # 사용자의 이름과 생년월일을 기반으로 해당 사용자의 ID를 가져오는 쿼리 실행
            cursor.execute("SELECT ID FROM user WHERE Name = ? AND Birth = ?", (name, birth))
            user_id_tuple = cursor.fetchone()

            if user_id_tuple:
                user_id = user_id_tuple[0]  # 첫 번째 열의 값만 추출
                conn.close()
            else:
                print("User ID not found.")
            '''
            # 다음 창으로 이동
            self.move_to_doctor_write(comment_ID)

    def handle_label_5_clicked(self, index):
        global request_list, complete_list, comment_ID

        # 클릭된 항목의 정보 가져오기
        selected_item = self.label_5.selectedIndexes()
        #print(selected_item)
        if selected_item is not None:
            selected_text =selected_item[0].data()
            select_index = selected_item[0].row()  # 선택된 항목의 행 인덱스 가져오기
            print(f"Selected row: {index}")
            print("complete selected_text: ", selected_text)
            index, name = complete_list[select_index]
            comment_ID = index
            '''
            item_text = selected_item.text()  # 클릭된 항목의 텍스트 정보
            # 텍스트 정보에서 이름과 생년월일 추출
            name = item_text.split(',')[0].split(': ')[1].strip()
            birth = item_text.split(',')[1].split(': ')[1].strip()
            # 추출한 정보를 변수에 저장
            self.selected_name = name
            self.selected_birth = birth

            conn = sqlite3.connect('storedb.db')
            cursor = conn.cursor()

            # 사용자의 이름과 생년월일을 기반으로 해당 사용자의 ID를 가져오는 쿼리 실행
            cursor.execute("SELECT ID FROM user WHERE Name = ? AND Birth = ?", (name, birth))
            user_id_tuple = cursor.fetchone()

            if user_id_tuple:
                user_id = user_id_tuple[0]  # 첫 번째 열의 값만 추출
                conn.close()
            else:
                print("User ID not found.")
            '''
            # 다음 창으로 이동
            self.move_to_doctor_write(comment_ID)

    def return_name(self,docterid):
               # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        print("return name : ", docterid)

        cursor.execute("SELECT Name FROM docter WHERE ID = ?", (docterid,))
        doctor_name=cursor.fetchone()[0]
        return doctor_name
    
    def return_user_name(self,userid):
               # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        cursor.execute("SELECT Name FROM user WHERE ID = ?", (userid,))
        user_name=cursor.fetchone()[0]
        return user_name
    
    #내가 넣음###########################################################################

    def setupUi(self, MainWindow, doctorid, userID):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1280, 720)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.fix_lable8 = QtWidgets.QLabel(self.centralwidget)
        self.fix_lable8.setGeometry(QtCore.QRect(290, 0, 1280, 720))
        self.fix_lable8.setStyleSheet("background-color:rgb(240,240,240);")
        self.fix_lable8.setText("")
        self.fix_lable8.setScaledContents(False)
        self.fix_lable8.setObjectName("fix_lable8")
        self.home_button = QtWidgets.QPushButton(self.centralwidget)
        self.home_button.setGeometry(QtCore.QRect(40, 220, 161, 31))
        self.home_button.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.home_button.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/home.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.home_button.setIcon(icon)
        self.home_button.setIconSize(QtCore.QSize(190, 50))
        self.home_button.setObjectName("home_button")
        self.logout_button = QtWidgets.QPushButton(self.centralwidget)
        self.logout_button.setGeometry(QtCore.QRect(28, 270, 191, 51))
        self.logout_button.setStyleSheet("background-color:rgba(255, 255, 255, 0);")
        self.logout_button.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/logout.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.logout_button.setIcon(icon)
        self.logout_button.setIconSize(QtCore.QSize(190, 50))
        self.logout_button.setObjectName("logout_button")

        #내가 추가함###############################################################################
        print("setui : ", doctorid)
        self.home_button.clicked.connect(lambda: self.move_to_docter_search(doctorid))
        self.logout_button.clicked.connect(self.move_to_Login)
        #내가 추가함############################################################################

        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(20, 40, 201, 61))
        self.label_2.setStyleSheet("border-radius:10px;\n"
"background-color: rgba(157, 157, 157, 45)")
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.user_image_label = QtWidgets.QLabel(self.centralwidget)
        self.user_image_label.setGeometry(QtCore.QRect(40, 50, 41, 41))
        self.user_image_label.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.user_image_label.setText("")
        self.user_image_label.setPixmap(QtGui.QPixmap("images/user (1).png"))
        self.user_image_label.setScaledContents(True)
        self.user_image_label.setObjectName("user_image_label")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(-30, 0, 1201, 720))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("images/background (2).png"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.user_label = QtWidgets.QLabel(self.centralwidget)
        self.user_label.setGeometry(QtCore.QRect(100, 55, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(18)
        font.setBold(False)
        font.setWeight(50)
        self.user_label.setFont(font)
        self.user_label.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.user_label.setAlignment(QtCore.Qt.AlignCenter)
        self.user_label.setObjectName("user_label")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(290, 80, 261, 591))
        self.groupBox.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius:20px;border:1px solid rgb(221,221,221);")
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.label_3 = QtWidgets.QLabel(self.groupBox)
        self.label_3.setGeometry(QtCore.QRect(20, 40, 191, 151))
        self.label_3.setStyleSheet("border:none;")
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        self.fix_label_4 = QtWidgets.QLabel(self.groupBox)
        self.fix_label_4.setGeometry(QtCore.QRect(95, 10, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setFamily("Noto Sans KR Medium")
        font.setBold(True)
        font.setWeight(75)
        self.fix_label_4.setFont(font)
        self.fix_label_4.setStyleSheet("background-color: rgba(255, 255, 255,0);border:none;")
        self.fix_label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.fix_label_4.setObjectName("fix_label_4")
        self.label_7 = QtWidgets.QLabel(self.groupBox)
        self.label_7.setGeometry(QtCore.QRect(30, 40, 210, 501))
        self.label_7.setStyleSheet("border:none;")
        self.label_7.setText("")
        self.label_7.setObjectName("label_7")
        self.fix_label_1 = QtWidgets.QLabel(self.centralwidget)
        self.fix_label_1.setGeometry(QtCore.QRect(320, 30, 551, 31))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(20)
        font.setBold(False)
        font.setWeight(50)
        self.fix_label_1.setFont(font)
        self.fix_label_1.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.fix_label_1.setObjectName("fix_label_1")
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(580, 470, 301, 211))
        self.groupBox_3.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius:20px;border:1px solid rgb(221,221,221);")
        self.groupBox_3.setTitle("")
        self.groupBox_3.setObjectName("groupBox_3")
        #self.label_4 = QtWidgets.QLabel(self.groupBox_3)
        self.label_4 = QtWidgets.QListView(self.groupBox_3)
        self.label_4.setGeometry(QtCore.QRect(20, 40, 251, 151))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setFamily("Noto Sans KR Medium")
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("border:none;")
        #self.label_4.setText("")
        self.label_4.setObjectName("label_4")

        #내가 추가#############################################################################
        self.label_4.clicked.connect(self.handle_label_4_clicked)
        #내가 추가################################################################################

        self.fix_label_5 = QtWidgets.QLabel(self.groupBox_3)
        self.fix_label_5.setGeometry(QtCore.QRect(40, 10, 151, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setFamily("Noto Sans KR Medium")
        font.setBold(True)
        font.setWeight(75)
        self.fix_label_5.setFont(font)
        self.fix_label_5.setStyleSheet("background-color: rgba(255, 255, 255,0);border:none;")
        self.fix_label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.fix_label_5.setObjectName("fix_label_5")
        self.groupBox_4 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_4.setGeometry(QtCore.QRect(910, 470, 301, 211))
        self.groupBox_4.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius:20px;border:1px solid rgb(221,221,221);")
        self.groupBox_4.setTitle("")
        self.groupBox_4.setObjectName("groupBox_4")
        #self.label_5 = QtWidgets.QLabel(self.groupBox_4)
        self.label_5 = QtWidgets.QListView(self.groupBox_4)
        self.label_5.setGeometry(QtCore.QRect(20, 40, 251, 151))
        self.label_5.setStyleSheet("border:none;")
        #self.label_5.setText("")
        self.label_5.setObjectName("label_5")
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setFamily("Noto Sans KR Medium")
        self.label_5.setFont(font)
        
        #내가 추가#############################################################################
        self.label_5.clicked.connect(self.handle_label_5_clicked)
        #내가 추가################################################################################

        self.fix_label_6 = QtWidgets.QLabel(self.groupBox_4)
        self.fix_label_6.setGeometry(QtCore.QRect(40, 10, 151, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setFamily("Noto Sans KR Medium")
        font.setBold(True)
        font.setWeight(75)
        self.fix_label_6.setFont(font)
        self.fix_label_6.setStyleSheet("background-color: rgba(255, 255, 255,0);border:none;")
        self.fix_label_6.setAlignment(QtCore.Qt.AlignCenter)
        self.fix_label_6.setObjectName("fix_label_6")
        self.groupBox_5 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_5.setGeometry(QtCore.QRect(580, 80, 641, 371))
        self.groupBox_5.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius:20px;border:1px solid rgb(221,221,221);")
        self.groupBox_5.setTitle("")
        self.groupBox_5.setObjectName("groupBox_5")
        #self.graph_widget = QtWidgets.QWidget(self.groupBox_5)
        self.graph_widget = QtWidgets.QScrollArea(self.groupBox_5)
        self.graph_widget.setGeometry(QtCore.QRect(20, 26, 431, 321))
        self.graph_widget.setStyleSheet("border:none;")
        self.graph_widget.setObjectName("graph_widget")
        self.balance_label = QtWidgets.QLabel(self.groupBox_5)
        self.balance_label.setGeometry(QtCore.QRect(490, 50, 127, 113))
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(80)
        font.setBold(True)
        font.setWeight(75)
        self.balance_label.setFont(font)
        self.balance_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color:rgb(105, 105, 255);border:none;")
        self.balance_label.setAlignment(QtCore.Qt.AlignCenter)
        self.balance_label.setObjectName("balance_label")
        self.fix_label_3 = QtWidgets.QLabel(self.groupBox_5)
        self.fix_label_3.setGeometry(QtCore.QRect(510, 200, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setFamily("Noto Sans KR Medium")
        font.setBold(True)
        font.setWeight(75)
        self.fix_label_3.setFont(font)
        self.fix_label_3.setStyleSheet("background-color: rgba(255, 255, 255,0);border:none;")
        self.fix_label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.fix_label_3.setObjectName("fix_label_3")
        self.count_label = QtWidgets.QLabel(self.groupBox_5)
        self.count_label.setGeometry(QtCore.QRect(480, 240, 141, 81))
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(70)
        font.setBold(True)
        font.setWeight(75)
        self.count_label.setFont(font)
        self.count_label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color:rgb(254, 193, 219);border:none;")
        self.count_label.setAlignment(QtCore.Qt.AlignCenter)
        self.count_label.setObjectName("count_label")
        self.fix_label_2 = QtWidgets.QLabel(self.groupBox_5)
        self.fix_label_2.setGeometry(QtCore.QRect(490, 30, 127, 21))
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setFamily("Noto Sans KR Medium")
        font.setBold(True)
        font.setWeight(75)
        self.fix_label_2.setFont(font)
        self.fix_label_2.setStyleSheet("background-color: rgb(255, 255, 255);border:none;")
        self.fix_label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.fix_label_2.setObjectName("fix_label_2")
        self.label_6 = QtWidgets.QLabel(self.groupBox_5)
        self.label_6.setGeometry(QtCore.QRect(470, 40, 1, 300))
        self.label_6.setStyleSheet("border:1px solid rgb(201,201,201);")
        self.label_6.setText("")
        self.label_6.setObjectName("label_6")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(30, 370, 203, 251))
        self.groupBox_2.setTitle("")
        self.groupBox_2.setObjectName("groupBox_2")

        self.sex_image_label = QtWidgets.QLabel(self.groupBox_2)
        self.sex_image_label.setGeometry(QtCore.QRect(40, 20, 121, 101))
        self.sex_image_label.setStyleSheet("background-color:rgba(0,0,0,200);\n"
"border:none;\n"
"border-radius:0;")
        self.sex_image_label.setText("")
        self.sex_image_label.setScaledContents(True)
        self.sex_image_label.setPixmap(QtGui.QPixmap("images/man.jpg"))
        self.sex_image_label.setObjectName("sex_image_label")

        self.name_label_2 = QtWidgets.QLabel(self.groupBox_2)
        self.name_label_2.setGeometry(QtCore.QRect(50, 130, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.name_label_2.setFont(font)
        self.name_label_2.setStyleSheet("background-color:rgba(0,0,0,0);\n"
"border:none;")
        self.name_label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.name_label_2.setObjectName("name_label_2")
        self.height_label = QtWidgets.QLabel(self.groupBox_2)
        self.height_label.setGeometry(QtCore.QRect(30, 190, 151, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.height_label.setFont(font)
        self.height_label.setStyleSheet("background-color:rgba(0,0,0,0);\n"
"color:rgb(141, 141, 141);border:none;")
        self.height_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.height_label.setObjectName("height_label")
        self.birth_label = QtWidgets.QLabel(self.groupBox_2)
        self.birth_label.setGeometry(QtCore.QRect(30, 160, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.birth_label.setFont(font)
        self.birth_label.setStyleSheet("background-color:rgba(0,0,0,0);\n"
"color:rgb(141, 141, 141);\n"
"border:none;")
        self.birth_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.birth_label.setObjectName("birth_label")
        self.label.raise_()
        self.fix_lable8.raise_()
        self.label_2.raise_()
        self.home_button.raise_()
        self.user_image_label.raise_()
        self.user_label.raise_()
        self.groupBox.raise_()
        self.fix_label_1.raise_()
        self.groupBox_3.raise_()
        self.groupBox_4.raise_()
        self.groupBox_5.raise_()
        self.groupBox_2.raise_()
        self.logout_button.raise_()
        MainWindow.setCentralWidget(self.centralwidget)


        print("setUI : ", doctorid)
        self.retranslateUi(MainWindow, doctorid, userID)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow, doctorID, userID):
        _translate = QtCore.QCoreApplication.translate
        print("retranslateUI : ", doctorID)
        name=self.return_name(doctorID)
        user_name=self.return_user_name(userID)
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.user_label.setText(_translate("MainWindow", name))
        self.fix_label_4.setText(_translate("MainWindow", "진료 기록"))
        self.fix_label_1.setText(_translate("MainWindow", "환자 정보"))
        self.fix_label_5.setText(_translate("MainWindow", "코멘트 요청 기록"))
        self.fix_label_6.setText(_translate("MainWindow", "코멘트 완료 기록"))
        self.balance_label.setText(_translate("MainWindow", "2"))
        self.fix_label_3.setText(_translate("MainWindow", "훈련횟수"))
        self.count_label.setText(_translate("MainWindow", "55"))
        self.fix_label_2.setText(_translate("MainWindow", "현재 균형등급"))
        self.name_label_2.setText(_translate("MainWindow", user_name))
        self.height_label.setText(_translate("MainWindow", "172cm / 15%"))
        self.birth_label.setText(_translate("MainWindow", "1999.99.99(만 55세)"))

        #내가 추가########################################################################################
        self.fetch_user_names(doctorID, userID)
        self.user_data(userID)
        self.history_data(userID)
        self.graph_setting(userID)

    def calculate_age(self, birth_date):
        # 현재 날짜 가져오기
        today = datetime.datetime.now()

        # 생일을 datetime 객체로 변환
        birth_date = datetime.datetime.strptime(birth_date, "%Y-%m-%d")

        # 만 나이 계산
        age = today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))

        return age

    # 사용자 정보에 따라 라벨에 정보 넣기
    def user_data(self, userID):
        # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        # 쿼리 실행
        cursor.execute("SELECT * FROM user WHERE ID = ?", (userID,))
        row = cursor.fetchall()

        birth_date = row[0][2]
        birth_str = row[0][2] + " (만 " + str(self.calculate_age(row[0][2])) + "세)"
        self.birth_label.setText(birth_str)
        height_str = str(row[0][4]) + " / " + str(row[0][5]) + "%"
        self.height_label.setText(height_str)

        if row[0][3] == 2:
            self.sex_image_label = QtWidgets.QLabel(self.groupBox_2)
            self.sex_image_label.setGeometry(QtCore.QRect(40, 20, 121, 101))
            self.sex_image_label.setStyleSheet("background-color:rgba(0,0,0,200);\n"
                                               "border:none;\n"
                                               "border-radius:0;")
            self.sex_image_label.setText("")
            self.sex_image_label.setScaledContents(True)
            self.sex_image_label.setPixmap(QtGui.QPixmap("images/woman.jpg"))
            self.sex_image_label.setObjectName("sex_image_label")


    # db(table : history)에서 균형활성도, 총 훈련 횟수, 이번주 훈련횟수 가져와서 입력
    def history_data(self, userID):
        # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        # 쿼리 실행
        cursor.execute("SELECT * FROM history WHERE user_id = ? ORDER BY Date DESC", (userID,))
        rows = cursor.fetchall()

        if not rows:
            self.balance_label.setText("0")
            self.count_label.setText("0")
        else:
            cursor.execute("SELECT * FROM history WHERE user_id = ? ORDER BY Grade ASC", (userID,))
            rows = cursor.fetchall()

            self.balance_label.setText(str(rows[0][2]))
            self.count_label.setText(str(len(rows)))

    def graph_setting(self, userID):
        grade_list = []
        date_list = []

        # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        # 쿼리 실행
        cursor.execute("SELECT Grade, Date FROM history WHERE user_id = ?", (userID,))
        rows = cursor.fetchall()
        for row in rows:
            grade_list.append(row[0])
            date_list.append(row[1])

        # 그래프 그리기
        pg.setConfigOption('background', 'w')  # 그래프 배경색 설정
        pg.setConfigOption('foreground', 'k')  # 그래프 전경색 설정

        plot_widget = pg.PlotWidget()
        plot_widget.setBackground('w')  # 그래프 배경색 설정
        plot_widget.setTitle('시간별 균형활성도 변화량')
        plot_widget.setLabel('left', '균형활성도')
        plot_widget.setLabel('bottom', '날짜')

        # 날짜를 숫자 인덱스로 변환
        x_values = np.arange(len(date_list))
        y_values = np.array(range(1, 6))

        # 막대그래프 아이템 생성
        #bars = pg.BarGraphItem(x=x_values, height=grade_list, width=0.6, brush=(241, 60, 230))

        curve = pg.PlotCurveItem(x=x_values, y=grade_list, pen=(241, 60, 230))

        # 그래프에 막대그래프 아이템 추가
        #plot_widget.addItem(bars)
        plot_widget.addItem(curve)

        print(date_list)

        # x 축 레이블 설정
        tick_positions = []  # 월을 표시할 위치를 저장할 리스트
        tick_labels = []  # 각 위치에 표시할 레이블을 저장할 리스트
        prev_month = None  # 이전 월을 저장할 변수
        for i, date in enumerate(date_list):
            current_month = datetime.datetime.strptime(date, "%Y-%m-%d").strftime("%m")
            if current_month != prev_month:  # 월이 바뀔 때마다 월을 표시함
                tick_positions.append(i)  # 월을 표시할 위치 저장
                tick_labels.append(datetime.datetime.strptime(date, "%Y-%m-%d").strftime("%m/%d"))  # 월을 표시할 레이블 저장
                prev_month = current_month  # 이전 월 업데이트
            elif i == 0:  # 첫번째 날짜에는 항상 월을 표시함
                tick_positions.append(i)  # 월을 표시할 위치 저장
                tick_labels.append(datetime.datetime.strptime(date, "%Y-%m-%d").strftime("%m/%d"))  # 월을 표시할 레이블 저장
            else:
                tick_positions.append(i)  # 월을 표시할 위치 저장
                tick_labels.append(datetime.datetime.strptime(date, "%Y-%m-%d").strftime("%d"))  # 월을 표시할 레이블 저장
        # x 축에 월 표시
        plot_widget.getAxis('bottom').setTicks(
            [[(tick_positions[i], tick_labels[i]) for i in range(len(tick_positions))]])

        # 연결 종료
        conn.close()
        ssh.close()

        # 그래프를 QLabel에 표시
        canvas = QWidget()  # PyQt5에서는 QWidget을 사용
        layout = QVBoxLayout(canvas)
        layout.addWidget(plot_widget)
        self.graph_widget.setWidget(canvas)
        self.graph_widget.setWidgetResizable(True)

    def move_to_doctor_write(self, commentID):
        try:
            from doctor_write import doctor_write
            # 현재 MainWindow를 새로운 창으로 변경
            self.MainWindow.setWindowTitle("comment")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.home_window = doctor_write(self.MainWindow)
            self.home_window.setupUi(self.MainWindow, commentID)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("login to doctor_write error : ", e)

    def move_to_docter_search(self, docterid):
        try:
            from docter_search import docter_search
            # 현재 MainWindow를 새로운 창으로 변경
            self.MainWindow.setWindowTitle("coment")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.home_window = docter_search(self.MainWindow)
            print("move to : ", docterid)
            self.home_window.setupUi(self.MainWindow, docterid)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("login to docter_search error : ", e)

    # 사용자 정보 화면으로 이동
    def move_to_Login(self, userID):
        try:
            from Login import Login
            # 현재 MainWindow를 새로운 창으로 변경
            self.MainWindow.setWindowTitle("Login")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.login_window = Login(self.MainWindow)
            print(userID)
            self.login_window.setupUi(self.MainWindow)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("doctor_user_inform to login error : ", e)

        #내가 추가########################################################################################

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = doctor_user_inform(MainWindow)
    ui.setupUi(MainWindow,docterid, 3)
    MainWindow.show()
    sys.exit(app.exec_())
