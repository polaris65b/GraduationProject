# -*- coding: utf-8 -*-
import os
os.environ["OMP_NUM_THREADS"] = "1"

from datetime import datetime

import numpy as np
import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import NearestNeighbors
import matplotlib.pyplot as plt
import joblib
import Home
import Calinder
import Train
import user_inform_modify
import Login


# Form implementation generated from reading ui file 'trainresult_detail.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QDate, QPointF, QTimer
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QMessageBox
from PyQt5.QtGui import QPainter, QBrush, QColor
from PyQt5.QtCore import Qt, QPoint, QPointF
from PyQt5.QtGui import QColor, QPen
import os
import sqlite3
import paramiko
import pyqtgraph as pg

count_list = []

class TargetWidget(QWidget):
    def __init__(self, x_list, y_list):
        super().__init__()
        self.initUI()
        self.x_list = x_list
        self.y_list = y_list

    def initUI(self):
        self.setGeometry(100, 100, 280, 280)
        self.setWindowTitle('Target Widget')

    def paintEvent(self, event):
        qp = QPainter()
        qp.begin(self)
        self.drawTarget(qp)
        qp.end()

    def drawTarget(self, qp):
        # Draw target
        size = self.size()
        center = QPoint(size.width() // 2, size.height() // 2)
        maxRadius = min(size.width(), size.height()) // 2
        numRings = 3
        ringWidth = maxRadius / (2 * numRings)

        # 각 원의 반지름 리스트 설정
        radius_list = [maxRadius, maxRadius - 2 * ringWidth, maxRadius - 4 * ringWidth]

        colors = [
            QColor(255, 204, 204),  # 연한 분홍색
            QColor(255, 255, 204),  # 연한 노란색
            QColor(204, 229, 255)  # 연한 파란색
        ]  # 초록색

        for i in range(numRings):
            radius = radius_list[i]  # 개별 원의 반지름 지정
            color = colors[i]
            qp.setPen(Qt.NoPen)
            qp.setBrush(QBrush(color))
            qp.drawEllipse(center, radius, radius)

        # x축 그리기
        pen = QPen(Qt.black)
        qp.setPen(pen)
        qp.drawLine(0, center.y(), size.width(), center.y())

        # y축 그리기
        qp.drawLine(center.x(), 0, center.x(), size.height())

        self.drawPoint(qp)

    def drawPoint(self, qp):
        # 점의 크기
        point_size = 5

        for x, y in zip(self.x_list, self.y_list):
            # 점 그리기
            qp.drawEllipse(QPointF(x * 7 + self.width() / 2, self.height() / 2 - (y * 7)), point_size, point_size)

class MplCanvas(FigureCanvas):

    def __init__(self, parent=None, width=5, height=4, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = fig.add_subplot(111)
        super(MplCanvas, self).__init__(fig)

class trainresult_detail(object):
    def __init__(self, main_window):
        self.MainWindow = main_window
    def setupUi(self, MainWindow, userID, date):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1280, 720)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.fix_label_gray = QtWidgets.QLabel(self.centralwidget)
        self.fix_label_gray.setGeometry(QtCore.QRect(260, -10, 1280, 720))
        self.fix_label_gray.setStyleSheet("background-color:rgb(240,240,240);")
        self.fix_label_gray.setText("")
        self.fix_label_gray.setScaledContents(False)
        self.fix_label_gray.setObjectName("fix_label_gray")
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setGeometry(QtCore.QRect(390, 110, 541, 441))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 539, 439))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.fix_label5 = QtWidgets.QLabel(self.centralwidget)
        self.fix_label5.setGeometry(QtCore.QRect(1020, 220, 221, 431))
        self.fix_label5.setStyleSheet("border-radius:20px;\n"
"background-color: rgb(255,255,255);\n"
"border: 1px solid rgb(216, 216, 216);")
        self.fix_label5.setText("")
        self.fix_label5.setObjectName("fix_label5")
        self.fix_label1_1 = QtWidgets.QLabel(self.centralwidget)
        self.fix_label1_1.setGeometry(QtCore.QRect(390, 30, 161, 61))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(-1)
        font.setBold(True)
        font.setWeight(75)
        self.fix_label1_1.setFont(font)
        self.fix_label1_1.setStyleSheet("font-size:25px;\n"
"font-weight: bold;\n"
"background-color:rgba(255,255,255,0);")
        self.fix_label1_1.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.fix_label1_1.setObjectName("fix_label1_1")

        self.comment_push_button = QtWidgets.QPushButton(self.centralwidget)
        self.comment_push_button.setGeometry(QtCore.QRect(1070, 570, 131, 61))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(13)
        font.setBold(False)
        font.setWeight(50)
        self.comment_push_button.setFont(font)
        self.comment_push_button.setStyleSheet("background-color: rgb(255, 170, 127);\n"
                                               "border-radius: 15px;\n"
                                               "border:1px solid rgb(0, 0, 0);")
        self.comment_push_button.setObjectName("comment_push_button")
        ########################################

        #self.train_result_label = QtWidgets.QLabel(self.centralwidget)
        self.train_result_label = QtWidgets.QPushButton(self.centralwidget)
        self.train_result_label.setGeometry(QtCore.QRect(1020, 240, 221, 61))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(-1)
        self.train_result_label.setFont(font)
        self.train_result_label.setStyleSheet("font-size:20px;\nborder:0px solid rgb(0,0,0);"
"")
        #self.train_result_label.setAlignment(QtCore.Qt.AlignCenter)
        self.train_result_label.setObjectName("train_result_label")
        #self.garo_label = QtWidgets.QLabel(self.centralwidget)
        self.garo_label = QtWidgets.QPushButton(self.centralwidget)
        self.garo_label.setGeometry(QtCore.QRect(1020, 360, 221, 61))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(-1)
        font.setBold(False)
        font.setWeight(50)
        self.garo_label.setFont(font)
        self.garo_label.setStyleSheet("font-size:20px;\nborder:0px solid rgb(0, 0, 0);"
"")
        #self.garo_label.setAlignment(QtCore.Qt.AlignCenter)
        self.garo_label.setObjectName("garo_label")
        #self.sero_label = QtWidgets.QLabel(self.centralwidget)
        self.sero_label = QtWidgets.QPushButton(self.centralwidget)
        self.sero_label.setGeometry(QtCore.QRect(1020, 420, 221, 61))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(-1)
        self.sero_label.setFont(font)
        self.sero_label.setStyleSheet("font-size:20px;\nborder:0px solid rgb(0,0,0);"
"")
        #self.sero_label.setAlignment(QtCore.Qt.AlignCenter)
        self.sero_label.setObjectName("sero_label")
        #self.grade_change_label = QtWidgets.QLabel(self.centralwidget)
        self.grade_change_label = QtWidgets.QPushButton(self.centralwidget)
        self.grade_change_label.setGeometry(QtCore.QRect(1020, 480, 221, 61))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(-1)
        self.grade_change_label.setFont(font)
        self.grade_change_label.setStyleSheet("font-size:20px;\nborder:0px solid rgb(0,0,0)"
"")
        #self.grade_change_label.setAlignment(QtCore.Qt.AlignCenter)
        self.grade_change_label.setObjectName("grade_change_label")
        self.fix_label4_3 = QtWidgets.QLabel(self.centralwidget)
        self.fix_label4_3.setGeometry(QtCore.QRect(1090, 130, 121, 41))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(-1)
        self.fix_label4_3.setFont(font)
        self.fix_label4_3.setStyleSheet("font-size:25px;")
        self.fix_label4_3.setAlignment(QtCore.Qt.AlignCenter)
        self.fix_label4_3.setObjectName("fix_label4_3")
        self.fix_label5_3 = QtWidgets.QLabel(self.centralwidget)
        self.fix_label5_3.setGeometry(QtCore.QRect(1020, 50, 221, 151))
        self.fix_label5_3.setStyleSheet("border-radius:20px;\n"
"background-color: rgb(255,255,255);\n"
"border: 1px solid rgb(216, 216, 216);")
        self.fix_label5_3.setText("")
        self.fix_label5_3.setObjectName("fix_label5_3")
        self.fix_dateEdit = QtWidgets.QDateEdit(self.centralwidget)
        self.fix_dateEdit.setGeometry(QtCore.QRect(1050, 60, 181, 51))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(-1)
        self.fix_dateEdit.setFont(font)
        self.fix_dateEdit.setStyleSheet("QDateEdit {\n"
"    font-size:28px;\n"
"    border: none;\n"
"    background: transparent;\n"
"}\n"
"\n"
"\n"
"/* Style for header area ###########################*/\n"
"#calendarWidget QWidget{\n"
"    alternate-background-color:#B8E2FF;\n"
"}\n"
"\n"
"/* Style for top navigation area #####################*/\n"
"\n"
"#qt_calendar_navigationbar{\n"
"    background-color:#fff;\n"
"    border:2px solid #B8E2FF;\n"
"    border-bottom:0px;\n"
"    border-top-left-radius: 5px;\n"
"    border-top-right-radius: 5px;\n"
"}\n"
"\n"
"/* Style for month change button ######################*/\n"
"#qt_calendar_prevmonth,\n"
"#qt_calendar_nextmonth{\n"
"/*border delete*/\n"
"border:none;\n"
"\n"
"/*delete default icons*/\n"
"\n"
"qproperty-icon:none;\n"
"\n"
"min-width:13px;\n"
"max-width:13px;\n"
"min-height:13px;\n"
"max-height:13px;\n"
"\n"
"border-radius:5px;\n"
"\n"
"/*set background transparent*/\n"
"background-color:transparent;\n"
"padding:5px;\n"
"}\n"
"\n"
"/*Style for prev month button######################*/\n"
"#qt_calendar_prevmonth{\n"
"    margin-left:5px;\n"
"    \n"
"    image: url(:/icon/images/left.ico);\n"
"}\n"
"\n"
"/* Style for next month button########################*/\n"
"\n"
"#qt_calendar_nextmonth{\n"
"    margin-right:5px;\n"
"    image: url(:/icon/images/righticon.ico);\n"
"}\n"
"\n"
"\n"
"#qt_calender_prevmonth:hover,\n"
"#qt_calendar_nextmonth:hover{\n"
"    background-color:#55aaff;\n"
"}\n"
"\n"
"#qt_calender_prevmonth:pressed,\n"
"#qt_calendar_nextmonth:pressed{\n"
"    background-color:gba(235,235,235,100);\n"
"}\n"
"\n"
"/* Style for month and year buttons ###############*/\n"
"#qt_calendar_yearbutton{\n"
"    color:#000;\n"
"    margin:5px;\n"
"    border-radius:5px;\n"
"    font-size:13px;\n"
"    padding:0 10px;\n"
"}\n"
"\n"
"#qt_calendar_monthbutton{\n"
"    width:110px;\n"
"    color:#000;\n"
"    font_size:13px;\n"
"    margin:5px 0;\n"
"    border-radius:5px;\n"
"    padding:0px 2;\n"
"}\n"
"\n"
"#qt_calendar_yearnutton:hover,\n"
"#qt_calendar_monthbutton:hover{\n"
"    background-color:#55aaff;\n"
"}\n"
"\n"
"#qt_calendar_yearnutton:pressed,\n"
"#qt_calendar_monthbutton:pressed{\n"
"    background-color:rgba(235,235,235,100);\n"
"}\n"
"\n"
"/*Style for year input lineEdit ################*/\n"
"#qt_calendar_yearedit{\n"
"    min-width:53px;\n"
"    color: #000;\n"
"    background:transparent;\n"
"    front-size:13px;\n"
"}\n"
"\n"
"/* Style for year change button ################ */\n"
"\n"
"#qt_calendar_yearedit::down-button{\n"
"    image: url(:/icon/images/down.ico);\n"
"    subcontrol-position:right;\n"
"}\n"
"#qt_calendar_yearedit::up-button{\n"
"    image: url(:/icon/images/up.ico);\n"
"    subcontrol-position:left;\n"
"}\n"
"\n"
"#qt_calendar_yearedit::down-button,\n"
"#qt_calendar_yearedit::up-button{\n"
"    width:10px;\n"
"    padding:0px 5px;\n"
"    border-radius:3px;\n"
"}\n"
"\n"
"#qt_calendar_yearedit::down-button:hover,\n"
"#qt_calendar_yearedit::up-button:hover{\n"
"    background-color:#55aaff;\n"
"}\n"
"\n"
"/*Style for month select menu ###################*/\n"
"\n"
"#calendarWidget QToolButton QMenu{\n"
"    background-color:#fff;\n"
"}\n"
"\n"
"#calendarWidget QToolButton QMenu::item{\n"
"    /*padding: 5px;*/\n"
"}\n"
"\n"
"#calendarWidget QToolButton QMenu::item:selected:enabled{\n"
"    background-color:#55aaff;\n"
"}\n"
"\n"
"#calendarWidget QToolButton::menu-indicator{\n"
"    /*remove the toolButton arrow*/\n"
"    /*image none;*/\n"
"    nosubcontrol-origin:margin;\n"
"    subcontrol-position:right center;\n"
"    margin-top:10px;\n"
"    width: 20px;\n"
"}\n"
"\n"
"/*Style for calendar table #################*/\n"
"#qt_calendar_calendarview{\n"
"    /*remove the selected dash box*/\n"
"\n"
"    border:2px solid #B8E2FF;\n"
"    border-top:0px;\n"
"    border-bottom-left-radius:5px;\n"
"    border-bottom-right-radius:5px;\n"
"}\n"
"\n"
"\n"
"\n"
"")
        self.fix_dateEdit.setMaximumDateTime(QtCore.QDateTime(QtCore.QDate(2031, 12, 31), QtCore.QTime(23, 59, 59)))
        self.fix_dateEdit.setMinimumDateTime(QtCore.QDateTime(QtCore.QDate(2023, 1, 1), QtCore.QTime(0, 0, 0)))
        self.fix_dateEdit.setCalendarPopup(True)
        self.fix_dateEdit.setCurrentSectionIndex(0)
        self.fix_dateEdit.setObjectName("fix_dateEdit")
        # self.user_label = QtWidgets.QLabel(self.centralwidget)
        self.user_label = QtWidgets.QPushButton(self.centralwidget)
        self.user_label.setGeometry(QtCore.QRect(100, 55, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(18)
        font.setBold(False)
        font.setWeight(50)
        self.user_label.setFont(font)
        self.user_label.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        #self.user_label.setAlignment(QtCore.Qt.AlignCenter)
        self.user_label.setObjectName("user_label")
        self.user_image_label = QtWidgets.QLabel(self.centralwidget)
        self.user_image_label.setGeometry(QtCore.QRect(40, 50, 41, 41))
        self.user_image_label.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.user_image_label.setText("")
        self.user_image_label.setPixmap(QtGui.QPixmap("images/user (1).png"))
        self.user_image_label.setScaledContents(True)
        self.user_image_label.setObjectName("user_image_label")
        self.home_button = QtWidgets.QPushButton(self.centralwidget)
        self.home_button.setGeometry(QtCore.QRect(40, 220, 161, 31))
        self.home_button.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.home_button.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/home.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.home_button.setIcon(icon)
        self.home_button.setIconSize(QtCore.QSize(190, 50))
        self.home_button.setObjectName("home_button")
        self.result_button = QtWidgets.QPushButton(self.centralwidget)
        self.result_button.setGeometry(QtCore.QRect(40, 280, 161, 31))
        self.result_button.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.result_button.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("images/trainresult.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.result_button.setIcon(icon1)
        self.result_button.setIconSize(QtCore.QSize(190, 50))
        self.result_button.setObjectName("result_button")
        self.logout_button = QtWidgets.QPushButton(self.centralwidget)
        self.logout_button.setGeometry(QtCore.QRect(30, 335, 191, 51))
        self.logout_button.setStyleSheet("background-color:rgba(255, 255, 255, 0);")
        self.logout_button.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/logout.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.logout_button.setIcon(icon)
        self.logout_button.setIconSize(QtCore.QSize(190, 50))
        self.logout_button.setObjectName("logout_button")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(-30, 0, 1201, 720))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("images/background (2).png"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(20, 40, 201, 61))
        self.label_2.setStyleSheet("border-radius:10px;\n"
"background-color: rgba(157, 157, 157, 45)")
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.start_button_2 = QtWidgets.QPushButton(self.centralwidget)
        self.start_button_2.setGeometry(QtCore.QRect(50, 510, 161, 161))
        self.start_button_2.setStyleSheet("background-color:rgba(0, 0, 0, 0);")
        self.start_button_2.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("images/icon_btn_start_basic.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.start_button_2.setIcon(icon2)
        self.start_button_2.setIconSize(QtCore.QSize(150, 150))
        self.start_button_2.setObjectName("start_button_2")
        self.fix_label = QtWidgets.QLabel(self.centralwidget)
        self.fix_label.setGeometry(QtCore.QRect(380, 600, 51, 51))
        self.fix_label.setText("")
        self.fix_label.setPixmap(QtGui.QPixmap("images/doctor_icon.png"))
        self.fix_label.setScaledContents(True)
        self.fix_label.setObjectName("fix_label")
        self.comment_label = QtWidgets.QLabel(self.centralwidget)
        self.comment_label.setGeometry(QtCore.QRect(470, 600, 431, 51))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(12)
        self.comment_label.setFont(font)
        self.comment_label.setWordWrap(True)
        self.comment_label.setOpenExternalLinks(False)
        self.comment_label.setObjectName("comment_label")
        self.fix_label_2 = QtWidgets.QLabel(self.centralwidget)
        self.fix_label_2.setGeometry(QtCore.QRect(440, 590, 481, 71))
        self.fix_label_2.setStyleSheet("background-color:rgb(255, 255, 255);\n"
"border:1px solid rgb(0, 0, 0);\n"
"border-radius:10px")
        self.fix_label_2.setText("")
        self.fix_label_2.setObjectName("fix_label_2")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(1045, 130, 51, 41))
        self.comboBox.setObjectName("comboBox")
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(15)
        self.comboBox.setFont(font)
        #self.kmeans_label = QtWidgets.QLabel(self.centralwidget)
        self.kmeans_label = QtWidgets.QPushButton(self.centralwidget)
        self.kmeans_label.setGeometry(QtCore.QRect(1020, 300, 221, 61))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(-1)
        self.kmeans_label.setFont(font)
        self.kmeans_label.setStyleSheet("font-size:20px;\nborder:0px solid rgb(0,0,0);"
"")
        #self.kmeans_label.setAlignment(QtCore.Qt.AlignCenter)
        self.kmeans_label.setObjectName("kmeans_label")
        self.title_label = QtWidgets.QLabel(self.centralwidget)
        self.title_label.setGeometry(QtCore.QRect(570, 50, 171, 31))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(-1)
        font.setBold(False)
        font.setWeight(50)
        self.title_label.setFont(font)
        self.title_label.setStyleSheet("font-size:20px;\n"
"\n"
"background-color:rgba(255,255,255,0);")
        self.title_label.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.title_label.setObjectName("title_label")
        self.fix_label1_8 = QtWidgets.QLabel(self.centralwidget)
        self.fix_label1_8.setGeometry(QtCore.QRect(540, 45, 31, 31))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(-1)
        font.setBold(True)
        font.setWeight(75)
        self.fix_label1_8.setFont(font)
        self.fix_label1_8.setStyleSheet("font-size:25px;\n"
"\n"
"background-color:rgba(255,255,255,0);")
        self.fix_label1_8.setAlignment(QtCore.Qt.AlignCenter)
        self.fix_label1_8.setObjectName("fix_label1_8")

        self.height_radiobutton = QtWidgets.QRadioButton(self. centralwidget)
        self.height_radiobutton.setGeometry(QtCore.QRect(670, 60, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(12)
        self.height_radiobutton.setFont(font)
        self.height_radiobutton.setStyleSheet("background-color:rgba(255, 255, 255, 0)")
        self.height_radiobutton.setObjectName("height_radiobutton")
        self.height_radiobutton.hide()

        self.age_radiobutton = QtWidgets.QRadioButton(self.centralwidget)
        self.age_radiobutton.setGeometry(QtCore.QRect(710, 60, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(12)
        self.age_radiobutton.setFont(font)
        self.age_radiobutton.setStyleSheet("background-color:rgba(255, 255, 255, 0)")
        self.age_radiobutton.setObjectName("age_radiobutton")
        self.age_radiobutton.hide()

        self.weight_radiobutton = QtWidgets.QRadioButton(self.centralwidget)
        self.weight_radiobutton.setGeometry(QtCore.QRect(770, 60, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(12)
        self.weight_radiobutton.setFont(font)
        self.weight_radiobutton.setStyleSheet("background-color:rgba(255, 255, 255, 0)")
        self.weight_radiobutton.setObjectName("weight_radiobutton")
        self.weight_radiobutton.hide()

        self.count_radiobutton = QtWidgets.QRadioButton(self.centralwidget)
        self.count_radiobutton.setGeometry(QtCore.QRect(860, 60, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(12)
        self.count_radiobutton.setFont(font)
        self.count_radiobutton.setStyleSheet("background-color:rgba(255, 255, 255, 0)")
        self.count_radiobutton.setObjectName("count_radiobutton")
        self.count_radiobutton.hide()

        ###############################################################
        self.start_button_2.enterEvent = lambda event: self.start_button_enter_event(event)
        self.start_button_2.leaveEvent = lambda event: self.start_button_leave_event(event)
        self.home_button.clicked.connect(lambda: self.move_to_home(userID))
        self.result_button.clicked.connect(lambda: self.move_to_result(userID))
        self.start_button_2.clicked.connect(lambda: self.move_to_train(userID))
        self.train_result_label.clicked.connect(lambda: self.graph_setting(userID, '훈련 결과'))
        self.kmeans_label.clicked.connect(lambda: self.graph_setting(userID, '분포도 분석'))
        self.garo_label.clicked.connect(lambda: self.graph_setting(userID, '가로 기울기 변화도'))
        self.sero_label.clicked.connect(lambda: self.graph_setting(userID, '세로 기울기 변화도'))
        self.grade_change_label.clicked.connect(lambda: self.graph_setting(userID, '훈련 등급 변화'))
        self.fix_dateEdit.dateChanged.connect(lambda: self.calinder_change(userID))
        self.comment_push_button.clicked.connect(lambda: self.request_fun(userID))
        self.user_label.clicked.connect(lambda: self.move_to_userInform(userID))
        self.logout_button.clicked.connect(self.move_to_Login)

        # 라디오 버튼이 변경될 때 update_kmeans 함수를 호출하는 시그널-슬롯 연결
        #self.height_radiobutton.clicked.connect(lambda: self.update_kmeans(userID, 'height'))
        #self.age_radiobutton.clicked.connect(lambda: self.update_kmeans(userID, 'age'))
        #self.weight_radiobutton.clicked.connect(lambda: self.update_kmeans(userID, 'BFP'))
        #self.count_radiobutton.clicked.connect(lambda: self.update_kmeans(userID, 'train_count'))

        self.height_radiobutton.clicked.connect(lambda: self.update_kmeans(userID, 'height'))
        self.age_radiobutton.clicked.connect(lambda: self.update_kmeans(userID, 'age'))
        self.weight_radiobutton.clicked.connect(lambda: self.update_kmeans(userID, 'BFP'))
        self.count_radiobutton.clicked.connect(lambda: self.update_kmeans(userID, 'train_count'))

        ###############################################################

        self.fix_label_gray.raise_()
        self.label.raise_()
        self.fix_label_2.raise_()
        self.label_2.raise_()
        self.scrollArea.raise_()
        self.fix_label5.raise_()
        self.fix_label1_1.raise_()
        self.train_result_label.raise_()
        self.garo_label.raise_()
        self.sero_label.raise_()
        self.grade_change_label.raise_()
        self.fix_label5_3.raise_()
        self.fix_label4_3.raise_()
        self.fix_dateEdit.raise_()
        self.user_label.raise_()
        self.user_image_label.raise_()
        self.home_button.raise_()
        self.result_button.raise_()
        self.start_button_2.raise_()
        self.fix_label.raise_()
        self.comment_label.raise_()
        self.comboBox.raise_()
        self.kmeans_label.raise_()
        self.title_label.raise_()
        self.fix_label1_8.raise_()
        self.comment_push_button.raise_()
        self.logout_button.raise_()
        self.height_radiobutton.raise_()
        self.age_radiobutton.raise_()
        self.weight_radiobutton.raise_()
        self.count_radiobutton.raise_()

        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow, userID, date)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow, userID, date):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Result"))
        self.fix_label1_1.setText(_translate("MainWindow", "상세 훈련 분석"))
        self.train_result_label.setText(_translate("MainWindow", "훈련 결과"))
        self.garo_label.setText(_translate("MainWindow", "가로 기울기 변화도"))
        self.sero_label.setText(_translate("MainWindow", "세로 기울기 변화도"))
        self.grade_change_label.setText(_translate("MainWindow", "훈련 등급 변화"))
        self.fix_label4_3.setText(_translate("MainWindow", "회차 훈련"))
        self.user_label.setText(_translate("MainWindow", "사용자"))
        self.comment_label.setText(_translate("MainWindow", "환자 코멘트는 다음과 같습니다."))
        self.kmeans_label.setText(_translate("MainWindow", "분포도 분석"))
        self.title_label.setText(_translate("MainWindow", "훈련 결과"))
        self.comment_push_button.setText(_translate("MainWindow", "코멘트 요청"))
        self.height_radiobutton.setText(_translate("MainWindow", "키"))
        self.age_radiobutton.setText(_translate("MainWindow", "나이"))
        self.weight_radiobutton.setText(_translate("MainWindow", "체지방률"))
        self.count_radiobutton.setText(_translate("MainWindow", "훈련횟수"))
        self.fix_label1_8.setText(_translate("MainWindow", "-"))
        self.user_date(userID, date)
        self.comboBox.currentIndexChanged.connect(lambda: self.graph_setting(userID, '훈련 결과'))
        self.graph_setting(userID, '훈련 결과')
        self.doctor_comment()

    # 요청 버튼 클릭 시
    def request_fun(self, userID):
        global count_list

        # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        # 쿼리 실행
        cursor.execute("SELECT Docid FROM user WHERE ID = ?", (userID,))
        row = cursor.fetchall()
        print(row)

        doctor_id = row[0][0]

        combo_index = self.comboBox.currentIndex()
        current_history_id = count_list[combo_index]

        # 쿼리 실행
        cursor.execute("SELECT Date FROM history WHERE ID = ?", (current_history_id,))
        row = cursor.fetchall()

        date = row[0][0]

        cursor.execute("INSERT INTO coment(user_id, docter_id, Date) VALUES (?, ?, ?)", (userID, doctor_id, date, ))
        conn.commit()  # 변경 사항을 반영하기 위해 커밋
        print("success")

        # 변경된 데이터베이스 파일을 서버로 다시 업로드
        sftp = ssh.open_sftp()
        print("접속 완료")
        print("세션 생성 완료")
        sftp.put(local_path, remote_path)
        print("전송 완료")
        sftp.close()

        # 정보 팝업 띄우기
        QMessageBox.information(None, "Success", "요청이 완료되었습니다.")

        # 연결 종료
        conn.close()

        ssh.close()

    # ID를 통해 이름 텍스트 파일에 입력
    def user_date(self, userID, date):
        global count_list

        # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        # 쿼리 실행
        cursor.execute("SELECT * FROM user WHERE ID = ?", (userID,))
        row = cursor.fetchall()
        print(row)

        str_date = str(date)

        self.user_label.setText(row[0][1])
        year, month, date = map(int, str(date).split('-'))
        self.fix_dateEdit.setDate(QDate(year, month, date))

        # history의 ID과 해당 날짜가 맞는 쿼리를 실행
        cursor.execute("SELECT ID FROM history WHERE user_id = ? AND Date = ?", (userID, str_date))
        rows = cursor.fetchall()

        count = 1

        count_list.clear()
        self.comboBox.clear()
        for row in rows:
            self.comboBox.addItem(str(count))
            count_list.append(row[0])
            count += 1

        print("user date : ", count_list)

        # 연결 종료
        conn.close()

        ssh.close()

    # 캘린더 변경되었을 때
    def calinder_change(self, userID):
        global count_list

        date = self.fix_dateEdit.date()

        str_date = date.toString("yyyy-MM-dd")

        print(str_date)

        # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        # history의 ID과 해당 날짜가 맞는 쿼리를 실행
        cursor.execute("SELECT ID FROM history WHERE user_id = ? AND Date = ?", (userID, str_date))
        rows = cursor.fetchall()

        count = 1

        count_list.clear()
        self.comboBox.clear()
        for row in rows:
            self.comboBox.addItem(str(count))
            count_list.append(row[0])
            count += 1

        self.graph_setting(userID, '훈련 결과')
        self.doctor_comment()

        # 연결 종료
        conn.close()

        ssh.close()

    # 의사 comment 설정하기
    def doctor_comment(self):
        # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        combo_index = self.comboBox.currentIndex()
        current_history_id = count_list[combo_index]

        # 쿼리 실행
        cursor.execute("SELECT user_id, Date FROM history WHERE ID = ?", (current_history_id,))
        row = cursor.fetchall()

        userID = row[0][0]
        date = row[0][1]

        print(userID, date)

        print(type(date))
        # 쿼리 실행
        cursor.execute("SELECT coment FROM coment WHERE user_id = ? AND Date = ?;", (userID, date, ))
        row = cursor.fetchall()

        if len(row) == 0 :
            self.comment_label.setText('')
        else :
            self.comment_label.setText(row[0][0])
        print(row)


    # 다른 label setting
    def graph_setting(self, userID, selectLabel):
        global count_list

        if selectLabel == '훈련 결과' :
            self.target_graph()
        elif selectLabel == '분포도 분석' :
            self.kmeans_graph(userID)
        elif selectLabel == '가로 기울기 변화도' :
            self.garo_graph()
        elif selectLabel == '세로 기울기 변화도' :
            self.sero_graph()
        elif selectLabel == '훈련 등급 변화' :
            self.grade_graph()

    # 파일이름을 받아서 그거를 열고 과녁 그래프 그리기
    def target_graph(self):
        self.title_label.setText("훈련 결과")
        self.scrollArea.takeWidget()
        self.count_radiobutton.hide()
        self.age_radiobutton.hide()
        self.weight_radiobutton.hide()
        self.height_radiobutton.hide()

        # 기존 위젯 제거
        if self.scrollArea.widget():
            old_widget = self.scrollArea.takeWidget()
            old_widget.deleteLater()

        # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        combo_index = self.comboBox.currentIndex()
        current_history_id = count_list[combo_index]

        # 쿼리 실행
        cursor.execute("SELECT addr FROM history WHERE ID = ?", (current_history_id,))
        row = cursor.fetchall()
        print("history_addr : ", row)

        addr = row[0][0]

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/' + addr
        local_path = addr
        sftp.get(remote_path, local_path)
        sftp.close()

        roll_list = []
        pitch_list = []

        with open(addr, 'r') as file:
            lines = file.readlines()

        for line in lines:
            numbers = line.strip().split(',')
            roll_list.append(-float(numbers[0]))
            pitch_list.append(float(numbers[1]))

        # 데이터를 추가한 후에 roll_list와 pitch_list의 길이를 확인하여 길이가 다르면 오류를 출력
        if len(roll_list) != len(pitch_list):
            print("Error: Length of roll_list and pitch_list are not the same!")

        plot_widget_roll_pitch = TargetWidget(pitch_list, roll_list)

        # 부모 위젯에 자식 위젯 설정
        self.scrollArea.setAlignment(Qt.AlignCenter)
        self.scrollArea.setWidget(plot_widget_roll_pitch)

        # 파일이 존재하는지 확인
        if os.path.exists(addr):
            # 파일 삭제
            os.remove(addr)
            print("파일이 성공적으로 삭제되었습니다.")
        else:
            print("파일이 존재하지 않습니다.")

    def calculate_age(self, birth_date):
        # 현재 날짜 가져오기
        today = datetime.now()

        # 생일을 datetime 객체로 변환
        birth_date = datetime.strptime(birth_date, "%Y-%m-%d")

        # 만 나이 계산
        age = today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))

        return age

    def get_selected_feature(self):
        if self.height_radiobutton.isChecked():
            return 'height'
        elif self.age_radiobutton.isChecked():
            return 'age'
        elif self.weight_radiobutton.isChecked():
            return 'BFP'
        elif self.count_radiobutton.isChecked():
            return 'train_count'
        else:
            return None

    # kmeans 그래프 그리기
    def kmeans_graph(self, userID):
        self.title_label.setText('분포도 분석')
        self.scrollArea.takeWidget()
        self.height_radiobutton.show()
        self.age_radiobutton.show()
        self.weight_radiobutton.show()
        self.count_radiobutton.show()

        self.height_radiobutton.setChecked(True)

        self.update_kmeans(userID, 'height')

    def update_kmeans(self, userID, selected_feature):
        self.scrollArea.takeWidget()
        # 기존 위젯 제거
        if self.scrollArea.widget():
            old_widget = self.scrollArea.takeWidget()
            old_widget.deleteLater()

        print("update selected_feature : ", selected_feature)

        # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        # 쿼리 실행
        cursor.execute("SELECT Birth, Sex, Height, BFP FROM user WHERE ID = ?", (userID,))
        row = cursor.fetchall()
        print("user_inform : ", row)

        user_age = self.calculate_age(row[0][0])
        user_sex = int(row[0][1])
        user_height = int(row[0][2])
        user_weight = int(row[0][3])

        cursor.execute("SELECT MIN(Grade), count(*) FROM history WHERE user_id = ?", (userID,))
        row = cursor.fetchall()

        user_grade = row[0][0]
        user_count = row[0][1]

        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/2.csv'
        local_path = '2.csv'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 데이터 로딩
        df = pd.read_csv(local_path, encoding='cp949')

        # 각 user_id에 대한 마지막 행을 선택
        df = df.sort_values('train_id').groupby('user_id', as_index=False).last()

        # 사용할 열을 선택합니다
        df = df[['user_id', 'height', 'age', 'BFP', 'grade', 'train_count', 'total']]

        # 유사한 사용자 찾기
        user_features = np.array([[user_height, user_age, user_weight, user_sex]])
        df_features = df[['height', 'age', 'BFP', 'train_count']].values

        # 표준화
        scaler = StandardScaler()
        df_features_scaled = scaler.fit_transform(df_features)
        user_features_scaled = scaler.transform(user_features)

        # NearestNeighbors 사용
        nbrs = NearestNeighbors(n_neighbors=6, algorithm='auto').fit(df_features_scaled)
        distances, indices = nbrs.kneighbors(user_features_scaled)

        closest_users = df.iloc[indices[0]]
        closest_users = closest_users[closest_users['user_id'] != userID]  # 입력받은 사용자 제외

        print("Closest Users: \n", closest_users)

        # 특성 리스트
        features = ['height', 'age', 'BFP', 'train_count']

        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/trained_model_with_balance.pkl'
        local_path_model1 = 'trained_model_with_balance.pkl'
        sftp.get(remote_path, local_path_model1)
        sftp.close()

        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/trained_model_with_balance2.pkl'
        local_path_model2 = 'trained_model_with_balance2.pkl'
        sftp.get(remote_path, local_path_model2)
        sftp.close()

        # 모델 불러오기
        model1 = joblib.load(local_path_model1)
        model2 = joblib.load(local_path_model2)

        feature_names_model1 = ['Height_cm', 'Age_years', 'Gender', 'BodyFat_Percent', 'Balance_Activity']
        feature_names_model2 = ['Height_cm', 'Age_years', 'Gender', 'BodyFat_Percent', 'Train_count']

        patient_info2 = np.array([user_height, user_age, user_sex, user_weight, user_grade])
        patient_info3 = np.array([user_height, user_age, user_sex, user_weight, user_count])

        patient_info_df = pd.DataFrame([patient_info2], columns=feature_names_model1)
        Max_Train = np.round(model1.predict(patient_info_df)[0]) + 20

        patient_info_df = pd.DataFrame([patient_info3], columns=feature_names_model2)

        train_counts = []
        balance_activities = []

        # patient_info3의 마지막 항목에서 train_counts의 첫 번째 값 추가
        last_train_count = patient_info3[-1]
        train_counts.append(last_train_count)

        # patient_info2의 마지막 항목에서 balance_activities의 첫 번째 값 추가
        last_balance_activity = patient_info2[-1]
        balance_activities.append(last_balance_activity)

        frequency_index = -1
        original_frequency = patient_info3[frequency_index]

        # 첫 번째 실행을 건너뛰고 두 번째 실행부터 시작
        patient_info3[frequency_index] += 1

        while patient_info3[frequency_index] < Max_Train:
            current_prediction = np.round(model2.predict(patient_info_df)[0])

            if current_prediction <= 1:
                break

            train_counts.append(patient_info3[frequency_index])
            balance_activities.append(current_prediction)

            patient_info3[frequency_index] += 1
            patient_info_df = pd.DataFrame([patient_info3], columns=feature_names_model2)

        # 라디오 버튼에서 선택된 feature 가져오기
        # selected_feature = self.get_selected_feature()
        # if not selected_feature:
        #    print("No feature selected")
        #    return

        # plt.figure(figsize=(18, 12))  # 전체 그림 크기 설정
        # Matplotlib 플롯 설정
        # 그래프 그리기

        # 선택된 feature에 대해 K-평균 클러스터링 수행 및 그래프 그리기
        kmeans = KMeans(n_clusters=3, random_state=0)
        df['cluster'] = kmeans.fit_predict(df[[selected_feature]])

        pg.setConfigOption('background', 'w')
        pg.setConfigOption('foreground', 'k')

        plot_widget = pg.PlotWidget()
        plot_widget.setBackground('w')

        for _, row in df.iterrows():
            if row['cluster'] == 0:
                brushColor = (147, 0, 137)
            elif row['cluster'] == 1:
                brushColor = (228, 214, 0)
            elif row['cluster'] == 2:
                brushColor = (0, 119, 43)

            scatter = pg.ScatterPlotItem([row[selected_feature]], [row['grade']], pen=None, symbol='o',
                                         symbolSize=10, brush=brushColor)
            plot_widget.addItem(scatter)

        # 입력된 user_id의 군집 ID 찾기
        user_cluster_id = df[df['user_id'] == userID]['cluster'].iloc[0]
        # 동일한 군집에 속한 데이터의 grade 값들을 추출
        cluster_grades = df[df['cluster'] == user_cluster_id]['grade']
        # 상위 몇 %에 해당하는지 계산
        percentile = (np.sum(cluster_grades <= user_grade) / len(cluster_grades)) * 100

        plot_widget.setTitle('test graph')
        plot_widget.setLabel('left', 'test left')
        plot_widget.setLabel('bottom', 'test bottom')

        if selected_feature == 'train_count':
            plot_widget.setTitle('Grade vs Count')
            plot_widget.setLabel('left', '균형활성도')
            plot_widget.setLabel('bottom', '훈련횟수')

            # LegendItem 생성 및 추가
            legend = pg.LegendItem((60, 40), offset=(350, 30))  # 크기 및 위치 설정
            legend.setParentItem(plot_widget.getPlotItem())

            # 테두리 스타일 설정
            legend.setPen(color=(0, 0, 0), width=1)  # 테두리 색상 및 두께 설정

            scatters = pg.ScatterPlotItem(train_counts, balance_activities, pen=None, symbol='o',
                                          symbolSize=10, brush=(241, 60, 230))
            plot_widget.addItem(scatters)

            curve = pg.PlotCurveItem(x=train_counts, y=balance_activities, pen=(241, 60, 230))
            plot_widget.addItem(curve)

            # 동일한 grade 값을 가진 데이터 필터링
            same_grade_df = df[df['grade'] == user_grade]
            # train_count 값의 분포 확인
            train_count_values = same_grade_df['train_count'].values
            # 입력된 user_id의 train_count 값
            user_train_count = user_count
            # 상위 몇 %에 해당하는지 계산
            percentile = (np.sum(train_count_values <= user_train_count) / len(train_count_values)) * 100

            # 사용자 데이터 표시
            scatter_user = pg.ScatterPlotItem(x=[user_train_count], y=[user_grade], pen=None, symbol='o',
                                              size=15, brush=(255, 0, 0), name=f'User ID {userID}')
            plot_widget.addItem(scatter_user)

            legend.addItem(scatter_user, f'User ID {userID} (Top {percentile:.2f}%) in Cluster')

            # total 값 차이가 가장 작은 5명의 환자도 표시
            for _, row in closest_users.iterrows():
                # 선택된 feature와 grade를 사용하여 scatter plot을 그립니다.
                scatter = pg.ScatterPlotItem(x=[row[selected_feature]], y=[row['grade']], pen=None, symbol='o',
                                             size=11,
                                             brush=(0, 255, 0), name=f'Closest User ID {row["user_id"]}')
                plot_widget.addItem(scatter)

                legend.addItem(scatter, f'Closest User ID {row["user_id"]}')

        else:
            feature_index = features.index(selected_feature)

            # LegendItem 생성 및 추가
            legend = pg.LegendItem((60, 40), offset=(30, 30))  # 크기 및 위치 설정
            legend.setParentItem(plot_widget.getPlotItem())

            plot_widget.setTitle(f'Grade vs {features[feature_index]}')
            plot_widget.setLabel('left', 'Grade')
            plot_widget.setLabel('bottom', f'{features[feature_index]}')

            if feature_index == 0:
                user_index = 0
            elif feature_index == 1:
                user_index = 1
            elif feature_index == 2:
                user_index = 3

            # 사용자 데이터 표시
            scatter_user = pg.ScatterPlotItem(x=[patient_info2[user_index]], y=[user_grade], pen=None, symbol='d',
                                              size=15, brush=(255, 0, 0), name=f'User ID {userID}')
            plot_widget.addItem(scatter_user)
            legend.addItem(scatter_user, f'User ID {userID} (Top {percentile:.2f}%) in Cluster')

        canvas = QWidget()
        layout = QVBoxLayout(canvas)
        layout.addWidget(plot_widget)
        self.scrollArea.setWidget(canvas)
        self.scrollArea.setWidgetResizable(True)

    # 가로 기울기 변화도 그래프 그리기
    def garo_graph(self):
        self.title_label.setText('가로 기울기 변화도')
        self.scrollArea.takeWidget()
        self.count_radiobutton.hide()
        self.age_radiobutton.hide()
        self.weight_radiobutton.hide()
        self.height_radiobutton.hide()

        # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        combo_index = self.comboBox.currentIndex()
        current_history_id = count_list[combo_index]

        # 쿼리 실행
        cursor.execute("SELECT addr FROM history WHERE ID = ?", (current_history_id,))
        row = cursor.fetchall()
        print("history_addr : ", row)

        addr = row[0][0]

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/' + addr
        local_path = addr
        sftp.get(remote_path, local_path)
        sftp.close()

        roll_list = []
        pitch_list = []

        with open(addr, 'r') as file:
            lines = file.readlines()

        for line in lines:
            numbers = line.strip().split(',')
            roll_list.append(-float(numbers[0]))
            pitch_list.append(float(numbers[1]))

        # 데이터를 추가한 후에 roll_list와 pitch_list의 길이를 확인하여 길이가 다르면 오류를 출력
        if len(roll_list) != len(pitch_list):
            print("Error: Length of roll_list and pitch_list are not the same!")

        # 그래프 그리기
        pg.setConfigOption('background', 'w')  # 그래프 배경색 설정
        pg.setConfigOption('foreground', 'k')  # 그래프 전경색 설정

        # 색상 및 점선 스타일의 펜 생성
        pen_dash_color_red = pg.mkPen(color=QColor(255, 0, 0), style=QtCore.Qt.DotLine)

        zero_line_pitch = pg.InfiniteLine(pos=0, angle=0, pen='k')
        minus_seven_line_pitch = pg.InfiniteLine(pos=-7, angle=0, pen=pen_dash_color_red)
        plus_seven_line_pitch = pg.InfiniteLine(pos=7, angle=0, pen=pen_dash_color_red)

        plot_widget_pitch = pg.PlotWidget()
        plot_widget_pitch.setBackground('w')  # 그래프 배경색 설정
        plot_widget_pitch.setTitle('시간별 좌우 변화량')
        plot_widget_pitch.setLabel('left', '좌&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;좌우 변화량&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;우')
        plot_widget_pitch.setLabel('bottom', '시간')

        plot_widget_pitch.addItem(zero_line_pitch)
        plot_widget_pitch.addItem(minus_seven_line_pitch)
        plot_widget_pitch.addItem(plus_seven_line_pitch)

        # 날짜를 숫자 인덱스로 변환
        x_values = np.arange(len(lines))

        plot_widget_pitch.plot(x_values, pitch_list, pen='b')

        # 그래프를 QLabel에 표시
        canvas_pitch = QWidget()  # PyQt5에서는 QWidget을 사용
        layout = QVBoxLayout(canvas_pitch)
        layout.addWidget(plot_widget_pitch)
        self.scrollArea.setWidget(canvas_pitch)
        self.scrollArea.setWidgetResizable(True)

        # 파일이 존재하는지 확인
        if os.path.exists(addr):
            # 파일 삭제
            os.remove(addr)
            print("파일이 성공적으로 삭제되었습니다.")
        else:
            print("파일이 존재하지 않습니다.")

    # 세로 기울기 변화도 그래프 그리기
    def sero_graph(self):
        self.title_label.setText('세로 기울기 변화도')
        self.scrollArea.takeWidget()
        self.count_radiobutton.hide()
        self.age_radiobutton.hide()
        self.weight_radiobutton.hide()
        self.height_radiobutton.hide()

        # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        combo_index = self.comboBox.currentIndex()
        current_history_id = count_list[combo_index]

        # 쿼리 실행
        cursor.execute("SELECT addr FROM history WHERE ID = ?", (current_history_id,))
        row = cursor.fetchall()
        print("history_addr : ", row)

        addr = row[0][0]

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/' + addr
        local_path = addr
        sftp.get(remote_path, local_path)
        sftp.close()

        roll_list = []
        pitch_list = []

        with open(addr, 'r') as file:
            lines = file.readlines()

        for line in lines:
            numbers = line.strip().split(',')
            roll_list.append(-float(numbers[0]))
            pitch_list.append(float(numbers[1]))

        # 데이터를 추가한 후에 roll_list와 pitch_list의 길이를 확인하여 길이가 다르면 오류를 출력
        if len(roll_list) != len(pitch_list):
            print("Error: Length of roll_list and pitch_list are not the same!")

        # 그래프 그리기
        pg.setConfigOption('background', 'w')  # 그래프 배경색 설정
        pg.setConfigOption('foreground', 'k')  # 그래프 전경색 설정

        # 색상 및 점선 스타일의 펜 생성
        pen_dash_color_red = pg.mkPen(color=QColor(255, 0, 0), style=QtCore.Qt.DotLine)

        zero_line_roll = pg.InfiniteLine(pos=0, angle=0, pen='k')
        minus_seven_line_roll = pg.InfiniteLine(pos=-7, angle=0, pen=pen_dash_color_red)
        plus_seven_line_roll = pg.InfiniteLine(pos=7, angle=0, pen=pen_dash_color_red)

        plot_widget_roll = pg.PlotWidget()
        plot_widget_roll.setBackground('w')  # 그래프 배경색 설정
        plot_widget_roll.setTitle('시간별 상하 변화량 +:상, -:하')
        plot_widget_roll.setLabel('left',
                                  '하&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;상하 변화량&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'
                                  '상')
        plot_widget_roll.setLabel('bottom', '시간')

        plot_widget_roll.addItem(zero_line_roll)
        plot_widget_roll.addItem(minus_seven_line_roll)
        plot_widget_roll.addItem(plus_seven_line_roll)

        # 날짜를 숫자 인덱스로 변환
        x_values = np.arange(len(lines))

        plot_widget_roll.plot(x_values, roll_list, pen='b')

        # 그래프를 QLabel에 표시
        canvas_roll = QWidget()  # PyQt5에서는 QWidget을 사용
        layout = QVBoxLayout(canvas_roll)
        layout.addWidget(plot_widget_roll)
        self.scrollArea.setWidget(canvas_roll)
        self.scrollArea.setWidgetResizable(True)

        # 파일이 존재하는지 확인
        if os.path.exists(addr):
            # 파일 삭제
            os.remove(addr)
            print("파일이 성공적으로 삭제되었습니다.")
        else:
            print("파일이 존재하지 않습니다.")

    # 균형활성도 그래프 그리기
    def grade_graph(self):
        self.title_label.setText('훈련 등급 변화')
        self.scrollArea.takeWidget()
        self.count_radiobutton.hide()
        self.age_radiobutton.hide()
        self.weight_radiobutton.hide()
        self.height_radiobutton.hide()

        grade_list = []
        date_list = []

        # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        combo_index = self.comboBox.currentIndex()
        current_history_id = count_list[combo_index]

        # 쿼리 실행
        cursor.execute("SELECT user_id FROM history WHERE ID = ?", (current_history_id,))
        row = cursor.fetchall()

        userID = row[0][0]

        # 쿼리 실행
        cursor.execute("SELECT Grade, Date FROM history WHERE user_id = ?", (userID,))
        rows = cursor.fetchall()
        for row in rows:
            grade_list.append(row[0])
            date_list.append(row[1])

        # 그래프 그리기
        pg.setConfigOption('background', 'w')  # 그래프 배경색 설정
        pg.setConfigOption('foreground', 'k')  # 그래프 전경색 설정

        plot_widget = pg.PlotWidget()
        plot_widget.setBackground('w')  # 그래프 배경색 설정
        plot_widget.setTitle('시간별 균형활성도 변화량')
        plot_widget.setLabel('left', '균형활성도')
        plot_widget.setLabel('bottom', '날짜')

        # 날짜를 숫자 인덱스로 변환
        x_values = np.arange(len(date_list))
        y_values = np.array(range(1, 6))

        # 막대그래프 아이템 생성
        # bars = pg.BarGraphItem(x=x_values, height=grade_list, width=0.6, brush=(241, 60, 230))

        curve = pg.PlotCurveItem(x=x_values, y=grade_list, pen=(241, 60, 230))

        # 그래프에 막대그래프 아이템 추가
        # plot_widget.addItem(bars)
        plot_widget.addItem(curve)

        # x 축 레이블 설정
        tick_positions = []  # 월을 표시할 위치를 저장할 리스트
        tick_labels = []  # 각 위치에 표시할 레이블을 저장할 리스트
        prev_month = None  # 이전 월을 저장할 변수
        for i, date in enumerate(date_list):
            # 현재 월을 가져옴
            current_month = datetime.strptime(date, "%Y-%m-%d").strftime("%m")
            if current_month != prev_month:  # 월이 바뀔 때마다 월을 표시함
                tick_positions.append(i)  # 월을 표시할 위치 저장
                tick_labels.append(datetime.strptime(date, "%Y-%m-%d").strftime("%m/%d"))  # 월을 표시할 레이블 저장
                prev_month = current_month  # 이전 월 업데이트
            elif i == 0:  # 첫번째 날짜에는 항상 월을 표시함
                tick_positions.append(i)  # 월을 표시할 위치 저장
                tick_labels.append(datetime.strptime(date, "%Y-%m-%d").strftime("%m/%d"))  # 월을 표시할 레이블 저장
            else:
                tick_positions.append(i)  # 월을 표시할 위치 저장
                tick_labels.append(datetime.strptime(date, "%Y-%m-%d").strftime("%d"))  # 월을 표시할 레이블 저장
        # x 축에 월 표시
        plot_widget.getAxis('bottom').setTicks(
            [[(tick_positions[i], tick_labels[i]) for i in range(len(tick_positions))]])

        # 연결 종료
        conn.close()
        ssh.close()

        # 그래프를 QLabel에 표시
        canvas = QWidget()  # PyQt5에서는 QWidget을 사용
        layout = QVBoxLayout(canvas)
        layout.addWidget(plot_widget)
        self.scrollArea.setWidget(canvas)
        self.scrollArea.setWidgetResizable(True)

    # 시작 버튼에 마우스가 올라갔을 때
    def start_button_enter_event(self, event):
        icon = QtGui.QIcon("images/icon_btn_start_hover.png")  # 마우스가 올라갔을 때의 이미지
        self.start_button_2.setIcon(icon)

    # 시작 버튼에 마우스가 벗어났을 때
    def start_button_leave_event(self, event):
        icon = QtGui.QIcon("images/icon_btn_start_basic.png")
        self.start_button_2.setIcon(icon)

    # 홈 화면으로 이동
    def move_to_home(self, userID):
        try:
            from Home import Home
            # 현재 MainWindow를 새로운 창으로 변경
            self.MainWindow.setWindowTitle("Home")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.home_window = Home(self.MainWindow)
            print(userID)
            self.home_window.setupUi(self.MainWindow, userID)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("detail to home error : ", e)

    # 결과 화면으로 이동
    def move_to_result(self, userID):
        try:
            from Calinder import Calinder
            # 현재 MainWindow를 새로운 창으로 변경
            self.MainWindow.setWindowTitle("Result")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.result_window = Calinder(self.MainWindow)
            print(userID)
            self.result_window.setupUi(self.MainWindow, userID)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("detail to result error : ", e)

    # 훈련 화면으로 이동
    def move_to_train(self, userID):
        try:
            from Train import Train
            # 현재 MainWindow를 새로운 창으로 변경
            self.MainWindow.setWindowTitle("Result")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.train_window = Train(self.MainWindow)
            print(userID)
            self.train_window.setupUi(self.MainWindow, userID)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("detail to train error : ", e)

    # 사용자 정보 화면으로 이동
    def move_to_userInform(self, userID):
        try:
            from user_inform_modify import UserInform
            # 현재 MainWindow를 새로운 창으로 변경
            self.MainWindow.setWindowTitle("Result")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.inform_window = UserInform(self.MainWindow)
            print(userID)
            self.inform_window.setupUi(self.MainWindow, userID)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("home to inform error : ", e)

    # 사용자 정보 화면으로 이동
    def move_to_Login(self, userID):
        try:
            from Login import Login
            # 현재 MainWindow를 새로운 창으로 변경
            self.MainWindow.setWindowTitle("Login")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.login_window =  Login(self.MainWindow)
            print(userID)
            self.login_window.setupUi(self.MainWindow)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("trainresult_detail to login error : ", e)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = trainresult_detail(MainWindow)
    ui.setupUi(MainWindow, 5, '2024-03-04')
    MainWindow.show()
    sys.exit(app.exec_())
