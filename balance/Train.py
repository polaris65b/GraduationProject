# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Train.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import os

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QAbstractTableModel, Qt
from datetime import datetime
from PyQt5.QtWidgets import QWidget, QVBoxLayout
from PyQt5.QtGui import QPainter, QBrush, QColor
from PyQt5.QtCore import Qt, QPoint, QPointF
from PyQt5.QtGui import QColor, QPen
import asyncio
import websockets
import paramiko
import sqlite3
import threading
import time
import Home
import Calinder
import user_inform_modify
import Login


from PyQt5.QtGui import QColor

from queue import Queue

# 메시지를 저장할 큐 생성
message_queue = Queue()

current_datetime = datetime.now()
formatted_date = current_datetime.strftime('%Y/%m/%d')

count = 0  # 초에 따라 카운트 증가
user_id = 0
train_list = []

# 모델 클래스 정의
class MyTableModel(QAbstractTableModel):
    def __init__(self, data):
        super(MyTableModel, self).__init__()
        self._data = data

    def rowCount(self, parent=None):
        return len(self._data)

    def columnCount(self, parent=None):
        return len(self._data[0])

    def data(self, index, role=Qt.DisplayRole):
        if role == Qt.DisplayRole:
            return self._data[index.row()][index.column()]
        elif role == Qt.BackgroundRole:
            value = self._data[index.row()][index.column()]
            if index.column() == 0:  # 첫 번째 열
                if (value < -7):
                    return QColor('black')  # 위 -> 흑색
                if (value > 9) :
                    return QColor('red')        # 아래 -> 적색
            elif index.column() == 1:  # 두 번째 열
                if (value < -7):
                    return QColor('yellow')  # 좌 -> 흰(노란)색
                if (value > 7) :
                    return QColor('blue')       # 우 -> 청색
        elif role == Qt.ForegroundRole:
            value = self._data[index.row()][index.column()]
            if index.column() == 0:  # 첫 번째 열
                if (value < -7):
                    return QColor('white')  # 위 -> 흑색
                if (value > 9):
                    return QColor('white')  # 아래 -> 적색
            elif index.column() == 1:  # 두 번째 열
                if (value < -7):
                    return QColor('black')  # 좌 -> 흰(노란)색
                if (value > 7):
                    return QColor('white')  # 우 -> 청색
        return None

    def headerData(self, section, orientation, role):
        if role == Qt.DisplayRole:
            if orientation == Qt.Horizontal:
                return ["상하", "좌우"][section]
            else:
                return str(section)


class TargetWidget(QWidget):
    def __init__(self, x, y):
        super().__init__()
        self.initUI()
        self.x = x
        self.y = y

    def initUI(self):
        self.setGeometry(100, 100, 450, 450)
        self.setWindowTitle('Target Widget')

    def updatePoints(self, x, y):
        self.x = x
        self.y = y
        self.update()  # 위젯을 다시 그리도록 업데이트 호출

    def paintEvent(self, event):
        qp = QPainter()
        qp.begin(self)
        self.drawTarget(qp)
        qp.end()

    def drawTarget(self, qp):
        # Draw target
        size = self.size()
        center = QPoint(size.width() // 2, size.height() // 2)
        maxRadius = min(size.width(), size.height()) // 2
        numRings = 3
        ringWidth = maxRadius / (2 * numRings)

        # 각 원의 반지름 리스트 설정
        radius_list = [maxRadius, maxRadius - 2 * ringWidth, maxRadius - 4 * ringWidth]

        colors = [
            QColor(255, 204, 204),  # 연한 분홍색
            QColor(255, 255, 204),  # 연한 노란색
            QColor(204, 229, 255)  # 연한 파란색
        ]  # 초록색

        for i in range(numRings):
            radius = radius_list[i]  # 개별 원의 반지름 지정
            color = colors[i]
            qp.setPen(Qt.NoPen)
            qp.setBrush(QBrush(color))
            qp.drawEllipse(center, radius, radius)

        # x축 그리기
        pen = QPen(Qt.black)
        qp.setPen(pen)
        qp.drawLine(0, center.y(), size.width(), center.y())

        # y축 그리기
        qp.drawLine(center.x(), 0, center.x(), size.height())

        self.drawPoint(qp)

    def drawPoint(self, qp):
        # 점의 크기
        point_size = 10

        # 점의 색상 설정
        color = Qt.red
        qp.setBrush(QBrush(color))

        # 점 그리기
        qp.drawEllipse(QPointF(self.x * 7 + self.width() / 2, self.height() / 2 - (self.y * 7)), point_size, point_size)

# 웹소켓 서버 구동 및 클라이언트로부터의 메시지 처리
async def echo(websocket, path):
    #global roll, pitch
    try:
        async for message in websocket:
            print(f"Received message: {message}")
            message_queue.put(message)
            '''
            if message.startswith("time_count: "):  # time_count 값을 받은 경우
                time_count = message.split(": ")[1]  # time_count 값을 추출합니다.
                print(f"Current time_count: {time_count}")  # time_count 값을 출력합니다.
            '''
            if message == "END":  # "END" 메시지를 받으면 루프를 종료합니다.
                break
            if websocket.open:  # 웹소켓이 열려 있을 때만 메시지를 보냅니다.
                await websocket.send(f"Echo: {message}")
    except websockets.exceptions.ConnectionClosedError:
        print("웹소켓 연결이 비정상적으로 종료되었습니다.")
    except asyncio.exceptions.CancelledError:
        print("비동기 작업이 취소되었습니다.")


class Train(object):
    def __init__(self, main_window):
        self.MainWindow = main_window

    def setupUi(self, MainWindow, userID):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1287, 720)
        MainWindow.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.start_button = QtWidgets.QPushButton(self.centralwidget)
        self.start_button.setGeometry(QtCore.QRect(390, 450, 231, 111))
        self.start_button.setStyleSheet("background-color:rgba(0, 0, 0, 0);")
        self.start_button.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/start_button.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.start_button.setIcon(icon)
        self.start_button.setIconSize(QtCore.QSize(190, 150))
        self.start_button.setObjectName("start_button")
        self.lcdNumber_3 = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdNumber_3.setGeometry(QtCore.QRect(580, 240, 101, 151))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.lcdNumber_3.setFont(font)
        self.lcdNumber_3.setStyleSheet("background-color:rgba(0,0,0,0)")
        self.lcdNumber_3.setSmallDecimalPoint(False)
        self.lcdNumber_3.setDigitCount(1)
        self.lcdNumber_3.setSegmentStyle(QtWidgets.QLCDNumber.Filled)
        self.lcdNumber_3.setProperty("value", 0.0)
        self.lcdNumber_3.setProperty("intValue", 0)
        self.lcdNumber_3.setObjectName("lcdNumber_3")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(488, 270, 31, 91))
        font = QtGui.QFont()
        font.setPointSize(60)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("background-color:rgba(255,255,255,0);")
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.lcdNumber = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdNumber.setGeometry(QtCore.QRect(320, 240, 181, 151))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.lcdNumber.setFont(font)
        self.lcdNumber.setStyleSheet("background-color:rgba(0,0,0,0)")
        self.lcdNumber.setSmallDecimalPoint(False)
        self.lcdNumber.setDigitCount(2)
        self.lcdNumber.setProperty("intValue", 60)
        self.lcdNumber.setObjectName("lcdNumber")
        self.lcdNumber_2 = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdNumber_2.setGeometry(QtCore.QRect(500, 240, 111, 151))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.lcdNumber_2.setFont(font)
        self.lcdNumber_2.setStyleSheet("background-color:rgba(0,0,0,0)")
        self.lcdNumber_2.setSmallDecimalPoint(False)
        self.lcdNumber_2.setDigitCount(1)
        self.lcdNumber_2.setSegmentStyle(QtWidgets.QLCDNumber.Filled)
        self.lcdNumber_2.setProperty("value", 0.0)
        self.lcdNumber_2.setProperty("intValue", 0)
        self.lcdNumber_2.setObjectName("lcdNumber_2")
        # self.result_table = QtWidgets.QTableView(self.centralwidget)
        self.result_table = QtWidgets.QScrollArea(self.centralwidget)
        self.result_table.setGeometry(QtCore.QRect(750, 150, 471, 491))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.result_table.setFont(font)
        self.result_table.setStyleSheet("background-color:rgb(255, 255, 255);border-radius:235;")
        self.result_table.setObjectName("result_table")
        self.logout_button = QtWidgets.QPushButton(self.centralwidget)
        self.logout_button.setGeometry(QtCore.QRect(30, 335, 191, 51))
        self.logout_button.setStyleSheet("background-color:rgba(255, 255, 255, 0);")
        self.logout_button.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/logout.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.logout_button.setIcon(icon)
        self.logout_button.setIconSize(QtCore.QSize(190, 50))
        self.logout_button.setObjectName("logout_button")
        self.start_button_2 = QtWidgets.QPushButton(self.centralwidget)
        self.start_button_2.setGeometry(QtCore.QRect(50, 510, 161, 161))
        self.start_button_2.setStyleSheet("background-color:rgba(0, 0, 0, 0);")
        self.start_button_2.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("images/icon_btn_start_hover.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.start_button_2.setIcon(icon1)
        self.start_button_2.setIconSize(QtCore.QSize(150, 150))
        self.start_button_2.setObjectName("start_button_2")
        self.train_background_label = QtWidgets.QLabel(self.centralwidget)
        self.train_background_label.setGeometry(QtCore.QRect(40, 580, 201, 91))
        self.train_background_label.setStyleSheet("background-color: rgba(255, 255, 255, 100);")
        self.train_background_label.setText("")
        self.train_background_label.setObjectName("train_background_label")
        self.date_label = QtWidgets.QLabel(self.centralwidget)
        self.date_label.setGeometry(QtCore.QRect(560, 40, 331, 61))
        font = QtGui.QFont()
        font.setPointSize(25)
        font.setBold(True)
        font.setWeight(75)
        self.date_label.setFont(font)
        self.date_label.setStyleSheet("border: 1px solid rgb(200,200,200); \n"
"border-radius:5px;")
        self.date_label.setAlignment(QtCore.Qt.AlignCenter)
        self.date_label.setObjectName("date_label")
        self.home_background_label = QtWidgets.QLabel(self.centralwidget)
        self.home_background_label.setGeometry(QtCore.QRect(50, 160, 191, 41))
        self.home_background_label.setStyleSheet("background-color: rgba(255, 255, 255, 100);")
        self.home_background_label.setText("")
        self.home_background_label.setObjectName("home_background_label")
        self.result_background_label = QtWidgets.QLabel(self.centralwidget)
        self.result_background_label.setGeometry(QtCore.QRect(50, 230, 191, 41))
        self.result_background_label.setStyleSheet("background-color: rgba(255, 255, 255, 100);")
        self.result_background_label.setText("")
        self.result_background_label.setObjectName("result_background_label")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(270, 0, 1021, 721))
        self.label_4.setStyleSheet("background-color:rgb(238, 238, 238);")
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(-30, 0, 1201, 720))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("images/background (2).png"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(20, 40, 201, 61))
        self.label_2.setStyleSheet("border-radius:10px;\n"
"background-color: rgba(157, 157, 157, 45)")
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        #self.user_label = QtWidgets.QLabel(self.centralwidget)
        self.user_label = QtWidgets.QPushButton(self.centralwidget)
        self.user_label.setGeometry(QtCore.QRect(100, 55, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(18)
        font.setBold(False)
        font.setWeight(50)
        self.user_label.setFont(font)
        self.user_label.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        #self.user_label.setAlignment(QtCore.Qt.AlignCenter)
        self.user_label.setObjectName("user_label")
        self.user_image_label = QtWidgets.QLabel(self.centralwidget)
        self.user_image_label.setGeometry(QtCore.QRect(40, 50, 41, 41))
        self.user_image_label.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.user_image_label.setText("")
        self.user_image_label.setPixmap(QtGui.QPixmap("images/user (1).png"))
        self.user_image_label.setScaledContents(True)
        self.user_image_label.setObjectName("user_image_label")
        self.home_button = QtWidgets.QPushButton(self.centralwidget)
        self.home_button.setGeometry(QtCore.QRect(40, 220, 161, 31))
        self.home_button.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.home_button.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("images/home.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.home_button.setIcon(icon2)
        self.home_button.setIconSize(QtCore.QSize(190, 50))
        self.home_button.setObjectName("home_button")
        self.result_button = QtWidgets.QPushButton(self.centralwidget)
        self.result_button.setGeometry(QtCore.QRect(40, 280, 161, 31))
        self.result_button.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.result_button.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("images/trainresult.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.result_button.setIcon(icon3)
        self.result_button.setIconSize(QtCore.QSize(190, 50))
        self.result_button.setObjectName("result_button")

        ###############################################################
        # 웹소켓 서버를 별도의 스레드에서 실행
        # threading.Thread(target=self.start_websocket_server, daemon=True).start()
        self.loop = None

        # 결과 출력용 테이블 & 시작 버튼 타이머 동작
        data = [[0.0, 0.0]]
        self.model = MyTableModel(data)
        '''
        self.result_table.setModel(self.model)
        self.result_table.setColumnWidth(0, 170)
        self.result_table.setColumnWidth(1, 170)
        font = QtGui.QFont()
        font.setPointSize(20)  # 글꼴 크기를 15로 설정

        self.result_table.horizontalHeader().setFont(font)
        '''
        self.target_widget = TargetWidget(0, 0)
        self.result_table.setAlignment(Qt.AlignCenter)
        self.result_table.setWidget(self.target_widget)

        self.start_button.clicked.connect(self.start_countdown)
        self.timer = QtCore.QTimer()
        self.timer.setInterval(10)
        self.timer.timeout.connect(self.update_lcdNumber)
        # self.timer.timeout.connect(self.add_row)  # 1초마다 행 추가
        self.timer.timeout.connect(self.update_target)

        self.home_button.clicked.connect(lambda: self.move_to_home(userID))
        self.result_button.clicked.connect(lambda: self.move_to_result(userID))
        #self.start_button.clicked.connect(lambda: self.move_to_train(userID))
        self.user_label.clicked.connect(lambda: self.move_to_userInform(userID))
        self.logout_button.clicked.connect(self.move_to_Login)
        ###############################################################

        self.label.raise_()
        self.label_4.raise_()
        self.result_background_label.raise_()
        self.home_background_label.raise_()
        self.train_background_label.raise_()
        self.start_button.raise_()
        self.lcdNumber_3.raise_()
        self.lcdNumber.raise_()
        self.lcdNumber_2.raise_()
        self.result_table.raise_()
        self.start_button_2.raise_()
        self.date_label.raise_()
        self.label_2.raise_()
        self.user_label.raise_()
        self.user_image_label.raise_()
        self.home_button.raise_()
        self.result_button.raise_()
        self.label_3.raise_()
        self.logout_button.raise_()
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow, userID)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow, userID):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Train"))
        self.lcdNumber_3.setToolTip(_translate("MainWindow", "<html><head/><body><p align=\"center\"><br/></p></body></html>"))
        self.label_3.setText(_translate("MainWindow", ":"))
        self.lcdNumber.setToolTip(_translate("MainWindow", "<html><head/><body><p align=\"center\"><br/></p></body></html>"))
        self.lcdNumber_2.setToolTip(_translate("MainWindow", "<html><head/><body><p align=\"center\"><br/></p></body></html>"))
        self.date_label.setText(_translate("MainWindow", "2024-05-09"))
        self.user_label.setText(_translate("MainWindow", "사용자"))
        self.user_date(userID)

    def start_websocket_server(self):
        # 이벤트 루프가 이미 존재하고 열려있다면 닫는다.
        if hasattr(self, 'loop') and self.loop is not None and not self.loop.is_closed():
            self.loop.call_soon_threadsafe(self.loop.stop)
            self.loop = None

        # 새로운 이벤트 루프를 생성하거나 기존의 이벤트 루프를 재사용한다.
        self.loop = asyncio.new_event_loop() if self.loop is None else self.loop
        asyncio.set_event_loop(self.loop)

        start_server = websockets.serve(echo, "0.0.0.0", 8765)
        self.loop.run_until_complete(start_server)
        self.loop.run_forever()

    def stop_websocket_server(self):
        # 웹소켓 서버 종료 로직
        if self.loop is not None and not self.loop.is_closed():
            for task in asyncio.all_tasks(self.loop):
                task.cancel()
            self.loop.call_soon_threadsafe(self.loop.stop)

    # ID를 통해 이름 텍스트 파일에 입력
    def user_date(self, userID):
        global user_id

        # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        # 쿼리 실행
        cursor.execute("SELECT * FROM user WHERE ID = ?", (userID,))
        row = cursor.fetchall()
        print(row)

        user_id = row[0][0]

        self.user_label.setText(row[0][1])

        current_date = datetime.now().strftime("%Y-%m-%d")
        self.date_label.setText(current_date)

    # 시작 버튼 클릭 시
    def start_countdown(self):
        # 웹소켓 서버를 별도의 스레드에서 실행
        threading.Thread(target=self.start_websocket_server, daemon=True).start()
        #threading.Thread(target=self.loop.run_until_complete, args=(self.start_websocket_server(),),
        #                 daemon=True).start()

        time.sleep(1)  # 웹소켓 서버가 시작될 시간을 주기 위한 잠시 대기

        # SSH로 라즈베리파이에 접속해서 Python 스크립트 실행
        try :
            self.ssh = paramiko.SSHClient()
            self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            self.ssh.connect('uoc0245.duckdns.org', username='uoc', password='0245')

            command = """
                cd mpu6050-pi;
                python test9.py;
                """

            stdin, stdout, stderr = self.ssh.exec_command(command)

            self.timer.start()
            self.reset_model()

            print(stderr)
        except Exception as e :
            print("start countdown : ", e)

    # 이미 시작 중일때 시작 버튼 다시 누르는 경우
    # 아직 구상 못함 & 현재는 한번 눌리면 다시 눌리는 것을 막아둔 상태
    def stop_countdown(self):
        self.timer.stop()

    # 시작 버튼을 누른 후 lcd가 변하도록 하는 함수
    def update_lcdNumber(self):
        global user_id
        global count, train_list
        current_value = self.lcdNumber.intValue()
        #current_value = self.lcdNumber.value()
        current_value_2 = self.lcdNumber_2.value()
        current_value_3 = self.lcdNumber_3.value()
        if current_value > 0:
            if count == 0 :
                self.lcdNumber_2.display(9)
                self.lcdNumber_3.display(9)
                self.lcdNumber.display(current_value - 1)
            else :
                if current_value_3 == 0 :
                    self.lcdNumber_3.display(9)
                else :
                    self.lcdNumber_3.display(current_value_3 - 1)

                if count % 10 == 0 :
                    if current_value_2 == 0 :
                        self.lcdNumber_2.display(9)
                    else :
                        self.lcdNumber_2.display(current_value_2 - 1)
                if count % 100 == 0 :
                    self.lcdNumber.display(current_value - 1)
            count += 1
            self.start_button.setEnabled(False)
        else :
            self.timer.stop()
            self.lcdNumber.display(60)
            self.lcdNumber_2.display(0)
            self.lcdNumber_3.display(0)
            self.start_button.setEnabled(True)
            self.ssh.close()
            #self.loop.call_soon_threadsafe(self.loop.stop)
            #self.loop.is_closed()
            #if self.loop is not None and not self.loop.is_closed():
            #    self.loop.call_soon_threadsafe(self.loop.stop)
            self.stop_websocket_server()  # 웹소켓 서버 종료

            # Train_start_result 화면으로 이동 저장을 위해
            try:
                from Train_start_result import Train_start_result
                # 현재 MainWindow를 새로운 창으로 변경
                self.MainWindow.setWindowTitle("Result")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
                self.train_start_result_window = Train_start_result(self.MainWindow)
                print(user_id)
                print(train_list)
                self.train_start_result_window.setupUi(self.MainWindow, user_id, train_list)  # home 클래스의 setupUi 메서드 호출
                self.MainWindow.show()
            except Exception as e:
                print("train to train_start_result error : ", e)

    # 테이블에 행 추가
    # 라즈베리파이에서 값을 받아와서 행에 추가하도록 변경 예정
    def add_row(self):
        global count, train_list
        if count % 100 == 0 :
            # 큐에서 메시지를 가져옴
            if not message_queue.empty():
                message = message_queue.get()
                print("add row message : ", message)
                train_list.append(message)
                roll, pitch = map(float, message.split(', '))
                try :
                    self.model._data.append([roll, pitch])  # 새로운 행 추가
                    self.model.layoutChanged.emit()  # 모델이 변경되었음을 알림
                    #self.result_table.scrollToBottom()  # 스크롤 자동으로 내리기
                except Exception as e :
                    print("add_row : ", e)

    # 과녁 그래프 업데이트
    def update_target(self):
        global count
        if count % 10 == 0 :
            if not message_queue.empty() :
                message = message_queue.get()
                roll, pitch = map(float, message.split(', '))
                try :
                    self.target_widget.updatePoints(pitch, roll)
                    if count % 100 == 0 :
                        self.model._data.append([roll, pitch])
                        train_list.append(message)
                        self.model.layoutChanged.emit()  # 모델이 변경되었음을 알림
                except Exception as e :
                    print("update target : ", e)


    # 다시 시작을 눌렀을 때 테이블이 리셋되도록 하는 함수
    def reset_model(self):
        data = [[0.0, 0.0]]
        self.target_widget = TargetWidget(0, 0)
        self.model = MyTableModel(data)
        self.result_table.setWidget(self.target_widget)




    # 홈 화면으로 이동
    def move_to_home(self, userID):
        try:
            from Home import Home
            # 현재 MainWindow를 새로운 창으로 변경
            self.MainWindow.setWindowTitle("Home")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.home_window = Home(self.MainWindow)
            print(userID)
            self.home_window.setupUi(self.MainWindow, userID)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("train to home error : ", e)

    # 결과 화면으로 이동
    def move_to_result(self, userID):
        try:
            from Calinder import Calinder
            # 현재 MainWindow를 새로운 창으로 변경
            self.MainWindow.setWindowTitle("Result")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.result_window = Calinder(self.MainWindow)
            print(userID)
            self.result_window.setupUi(self.MainWindow, userID)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("train to result error : ", e)

    # 사용자 정보 화면으로 이동
    def move_to_userInform(self, userID):
        try:
            from user_inform_modify import UserInform
            # 현재 MainWindow를 새로운 창으로 변경
            self.MainWindow.setWindowTitle("Result")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.inform_window = UserInform(self.MainWindow)
            print(userID)
            self.inform_window.setupUi(self.MainWindow, userID)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("train to inform error : ", e)

    # 사용자 정보 화면으로 이동
    def move_to_Login(self, userID):
        try:
            from Login import Login
            # 현재 MainWindow를 새로운 창으로 변경
            self.MainWindow.setWindowTitle("Login")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.login_window =  Login(self.MainWindow)
            print(userID)
            self.login_window.setupUi(self.MainWindow)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("Train to login error : ", e)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Train(MainWindow)
    ui.setupUi(MainWindow, 2)
    MainWindow.show()
    sys.exit(app.exec_())
