# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Calinder.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from datetime import datetime
import paramiko
import sqlite3
import time
import re
import Home
import Calinder
import Train
import user_inform_modify
import Login

class Calinder(object):
    def __init__(self, main_window):
        self.MainWindow = main_window

    # 여기가 캘린더 위젯 안에 날자 바꾸는거
    def setup_date_text_format(self, userID):
        # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        # 쿼리 실행
        cursor.execute("select ID, Date from history where user_id = ?", (userID,))
        rows = cursor.fetchall()
        print("date_format", rows)

        date_dictionary = dict()
        previous_date = 0
        ID_list = []

        for row in rows :
            if previous_date == row[1] :
                date_dictionary[row[1]].append(row[0])
            else :
                ID_list = []
                ID_list.append(row[0])
                date_dictionary[row[1]] = ID_list
                previous_date = row[1]

        for key in date_dictionary.keys() :
            list = date_dictionary[key]
            count = len(list)
            low_grade = 10

            for ID in list :
                cursor.execute("select grade from history where ID = ?", (ID,))
                row = cursor.fetchall()

                print(row)

                if low_grade > row[0][0] :
                    low_grade = row[0][0]

            year, month, date = map(int, key.split('-'))

            date = QtCore.QDate(year, month, date)  # 특정 날짜 설정
            text_format = self.calendarWidget.dateTextFormat(date)
            text_format.setForeground(QtCore.Qt.red)  # 텍스트 색상 설정
            text_format.setBackground(QtCore.Qt.yellow)  # 배경 색 설정
            text_format.setFontWeight(QtGui.QFont.Bold)
            text_format.setVerticalAlignment(QtGui.QTextCharFormat.AlignTop)
            text_format.setToolTip(str(low_grade) + "등급 \n 훈련횟수 : " + str(count))  # 마우스 올리면 정보 뜸
            self.calendarWidget.setDateTextFormat(date, text_format)

        '''
        for row in rows:
            year, month, date = map(int, row[0].split('-'))
            grade = row[1]
            count = row[2]

            date = QtCore.QDate(year, month, date)  # 특정 날짜 설정
            text_format = self.calendarWidget.dateTextFormat(date)
            text_format.setForeground(QtCore.Qt.red)  # 텍스트 색상 설정
            text_format.setBackground(QtCore.Qt.yellow)  # 배경 색 설정
            text_format.setFontWeight(QtGui.QFont.Bold)
            text_format.setVerticalAlignment(QtGui.QTextCharFormat.AlignTop)
            text_format.setToolTip(str(grade) + "등급 \n 훈련횟수 : " + str(count))  # 마우스 올리면 정보 뜸
            self.calendarWidget.setDateTextFormat(date, text_format)
        '''
    def setupUi(self, MainWindow, userID):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1280, 705)
        font = QtGui.QFont()
        font.setPointSize(11)
        MainWindow.setFont(font)
        MainWindow.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.calendarWidget = QtWidgets.QCalendarWidget(self.centralwidget)
        self.calendarWidget.setGeometry(QtCore.QRect(400, 40, 781, 621))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(11)

        # 내가 추가
        self.calendarWidget.clicked.connect(lambda: self.on_calendar_clicked(userID))
        # setup_date_text_format 함수 호출
        #self.setup_date_text_format(userID)
        # 내가 추가

        self.calendarWidget.setFont(font)
        self.calendarWidget.setStyleSheet("/* Style for header area ###########################*/\n"
"\n"
"#calendarWidget QWidget{\n"
"    alternate-background-color:#B8E2FF;\n"
"}\n"
"\n"
"/* Style for top navigation area #####################*/\n"
"\n"
"#qt_calendar_navigationbar{\n"
"    background-color:#fff;\n"
"    border:2px solid #B8E2FF;\n"
"    border-bottom:0px;\n"
"    border-top-left-radius: 5px;\n"
"    border-top-right-radius: 5px;\n"
"}\n"
"\n"
"/* Style for month change button ######################*/\n"
"#qt_calendar_prevmonth,\n"
"#qt_calendar_nextmonth{\n"
"/*border delete*/\n"
"border:none;\n"
"\n"
"/*delete default icons*/\n"
"\n"
"qproperty-icon:none;\n"
"\n"
"min-width:13px;\n"
"max-width:13px;\n"
"min-height:13px;\n"
"max-height:13px;\n"
"\n"
"border-radius:5px;\n"
"\n"
"/*set background transparent*/\n"
"background-color:transparent;\n"
"padding:5px;\n"
"}\n"
"\n"
"/*Style for prev month button######################*/\n"
"#qt_calendar_prevmonth{\n"
"    margin-left:5px;\n"
"    \n"
"    image: url(:/icon/images/left.ico);\n"
"}\n"
"\n"
"/* Style for next month button########################*/\n"
"\n"
"#qt_calendar_nextmonth{\n"
"    margin-right:5px;\n"
"    image: url(:/icon/images/righticon.ico);\n"
"}\n"
"\n"
"\n"
"#qt_calender_prevmonth:hover,\n"
"#qt_calendar_nextmonth:hover{\n"
"    background-color:#55aaff;\n"
"}\n"
"\n"
"#qt_calender_prevmonth:pressed,\n"
"#qt_calendar_nextmonth:pressed{\n"
"    background-color:gba(235,235,235,100);\n"
"}\n"
"\n"
"/* Style for month and year buttons ###############*/\n"
"#qt_calendar_yearbutton{\n"
"    color:#000;\n"
"    margin:10px;\n"
"    border-radius:10px;\n"
"    font-size:18px;\n"
"    padding:0 10px;\n"
"}\n"
"\n"
"#qt_calendar_monthbutton{\n"
"    width:110px;\n"
"    color:#000;\n"
"    font_size:13px;\n"
"    margin:5px 0;\n"
"    border-radius:5px;\n"
"    padding:0px 2;\n"
"}\n"
"\n"
"#qt_calendar_yearnutton:hover,\n"
"#qt_calendar_monthbutton:hover{\n"
"    background-color:#55aaff;\n"
"}\n"
"\n"
"#qt_calendar_yearnutton:pressed,\n"
"#qt_calendar_monthbutton:pressed{\n"
"    background-color:rgba(235,235,235,100);\n"
"}\n"
"\n"
"/*Style for year input lineEdit ################*/\n"
"#qt_calendar_yearedit{\n"
"    min-width:53px;\n"
"    color: #000;\n"
"    background:transparent;\n"
"    front-size:13px;\n"
"}\n"
"\n"
"/* Style for year change button ################ */\n"
"\n"
"#qt_calendar_yearedit::down-button{\n"
"    image: url(:/icon/images/down.ico);\n"
"    subcontrol-position:right;\n"
"}\n"
"#qt_calendar_yearedit::up-button{\n"
"    image: url(:/icon/images/up.ico);\n"
"    subcontrol-position:left;\n"
"}\n"
"\n"
"#qt_calendar_yearedit::down-button,\n"
"#qt_calendar_yearedit::up-button{\n"
"    width:10px;\n"
"    padding:0px 1px;\n"
"    border-radius:3px;\n"
"}\n"
"\n"
"#qt_calendar_yearedit::down-button:hover,\n"
"#qt_calendar_yearedit::up-button:hover{\n"
"    background-color:#55aaff;\n"
"}\n"
"\n"
"/*Style for month select menu ###################*/\n"
"\n"
"#calendarWidget QToolButton QMenu{\n"
"    background-color:#fff;\n"
"}\n"
"\n"
"#calendarWidget QToolButton QMenu::item{\n"
"    /*padding: 5px;*/\n"
"}\n"
"\n"
"#calendarWidget QToolButton QMenu::item:selected:enabled{\n"
"    background-color:#55aaff;\n"
"}\n"
"\n"
"#calendarWidget QToolButton::menu-indicator{\n"
"    /*remove the toolButton arrow*/\n"
"    /*image none;*/\n"
"    nosubcontrol-origin:margin;\n"
"    subcontrol-position:right center;\n"
"    margin-top:10px;\n"
"    width: 20px;\n"
"}\n"
"\n"
"/*Style for calendar table #################*/\n"
"#qt_calendar_calendarview{\n"
"    /*remove the selected dash box*/\n"
"\n"
"    border:2px solid #B8E2FF;\n"
"    border-top:0px;\n"
"    border-bottom-left-radius:5px;\n"
"    border-bottom-right-radius:5px;\n"
"}\n"
"\n"
"\n"
"\n"
"")
        self.calendarWidget.setVerticalHeaderFormat(QtWidgets.QCalendarWidget.NoVerticalHeader)
        self.calendarWidget.setObjectName("calendarWidget")
        self.fix_label_gray = QtWidgets.QLabel(self.centralwidget)
        self.fix_label_gray.setGeometry(QtCore.QRect(290, 0, 1280, 720))
        self.fix_label_gray.setStyleSheet("background-color:rgb(240,240,240);")
        self.fix_label_gray.setText("")
        self.fix_label_gray.setScaledContents(False)
        self.fix_label_gray.setObjectName("fix_label_gray")
        self.home_button = QtWidgets.QPushButton(self.centralwidget)
        self.home_button.setGeometry(QtCore.QRect(40, 220, 161, 31))
        self.home_button.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.home_button.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/home.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.home_button.setIcon(icon)
        self.home_button.setIconSize(QtCore.QSize(190, 50))
        self.home_button.setObjectName("home_button")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(20, 40, 201, 61))
        self.label_2.setStyleSheet("border-radius:10px;\n"
"background-color: rgba(157, 157, 157, 45)")
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.user_image_label = QtWidgets.QLabel(self.centralwidget)
        self.user_image_label.setGeometry(QtCore.QRect(40, 50, 41, 41))
        self.user_image_label.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.user_image_label.setText("")
        self.user_image_label.setPixmap(QtGui.QPixmap("images/user (1).png"))
        self.user_image_label.setScaledContents(True)
        self.user_image_label.setObjectName("user_image_label")
        self.result_button = QtWidgets.QPushButton(self.centralwidget)
        self.result_button.setGeometry(QtCore.QRect(40, 280, 161, 41))
        self.result_button.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.result_button.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("images/trainresult.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.result_button.setIcon(icon2)
        self.result_button.setIconSize(QtCore.QSize(190, 50))
        self.result_button.setObjectName("result_button")
        self.logout_button = QtWidgets.QPushButton(self.centralwidget)
        self.logout_button.setGeometry(QtCore.QRect(30, 340, 191, 51))
        self.logout_button.setStyleSheet("background-color:rgba(255, 255, 255, 0);")
        self.logout_button.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/logout.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.logout_button.setIcon(icon)
        self.logout_button.setIconSize(QtCore.QSize(190, 50))
        self.logout_button.setObjectName("logout_button")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(-30, 0, 1201, 720))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("images/background (2).png"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        # self.user_label = QtWidgets.QLabel(self.centralwidget)
        self.user_label = QtWidgets.QPushButton(self.centralwidget)
        self.user_label.setGeometry(QtCore.QRect(100, 55, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Noto Sans KR Medium")
        font.setPointSize(18)
        font.setBold(False)
        font.setWeight(50)
        self.user_label.setFont(font)
        self.user_label.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        #self.user_label.setAlignment(QtCore.Qt.AlignCenter)
        self.user_label.setObjectName("user_label")
        self.start_button = QtWidgets.QPushButton(self.centralwidget)
        self.start_button.setGeometry(QtCore.QRect(50, 510, 161, 161))
        self.start_button.setStyleSheet("background-color:rgba(0, 0, 0, 0);")
        self.start_button.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("images/icon_btn_start_basic.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.start_button.setIcon(icon3)
        self.start_button.setIconSize(QtCore.QSize(150, 150))
        self.start_button.setObjectName("start_button_2")

        ###############################################################
        self.start_button.enterEvent = lambda event: self.start_button_enter_event(event)
        self.start_button.leaveEvent = lambda event: self.start_button_leave_event(event)
        self.home_button.clicked.connect(lambda: self.move_to_home(userID))
        #self.result_button.clicked.connect(lambda: self.move_to_result(userID))
        self.start_button.clicked.connect(lambda: self.move_to_train(userID))
        self.user_label.clicked.connect(lambda: self.move_to_userInform(userID))
        self.logout_button.clicked.connect(self.move_to_Login)
        ###############################################################

        self.label.raise_()
        self.fix_label_gray.raise_()
        self.label_2.raise_()
        self.calendarWidget.raise_()
        self.home_button.raise_()
        self.user_image_label.raise_()
        self.result_button.raise_()
        self.user_label.raise_()
        self.start_button.raise_()
        self.logout_button.raise_()
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow, userID)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    # 내가 추가함#

    # 내가 추가함

    def retranslateUi(self, MainWindow, userID):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Result"))
        self.user_label.setText(_translate("MainWindow", "사용자"))
        self.user_date(userID)
        self.setup_date_text_format(userID)

    def on_calendar_clicked(self, userID):
        date = self.calendarWidget.selectedDate()
        formatted_date = date.toString("yyyy-MM-dd")
        print(formatted_date)
        # 클릭된 날짜의 배경색 확인
        date_text_format = self.calendarWidget.dateTextFormat(date)
        background_color = date_text_format.background().color()

        # 특정한 배경색인 경우에만 동작 실행
        if background_color == QtCore.Qt.yellow:
            try:
                from trainresult import trainresult
                # 현재 MainWindow를 새로운 창으로 변경
                self.MainWindow.setWindowTitle("TrainResult")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
                self.trainresult_window = trainresult(self.MainWindow)
                print(userID)
                print(formatted_date)
                self.trainresult_window.setupUi(self.MainWindow, userID, formatted_date)
                self.MainWindow.show()
            except Exception as e:
                print("Calinder to TrainResult error : ", e)

    # ID를 통해 이름 텍스트 파일에 입력
    def user_date(self, userID):
        # SSH로 서버에 접속해서 Python 스크립트 실행
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('192.168.0.40', username='user', password='1234')

        # SSH로 파일 다운로드하여 로컬에서 조회
        sftp = ssh.open_sftp()
        remote_path = '/home/user/test/storedb.db'
        local_path = 'storedb.db'
        sftp.get(remote_path, local_path)
        sftp.close()

        # 로컬에서 SQLite 데이터베이스 연결하여 쿼리 실행
        conn = sqlite3.connect(local_path)
        cursor = conn.cursor()

        # 쿼리 실행
        cursor.execute("SELECT * FROM user WHERE ID = ?", (userID,))
        row = cursor.fetchall()
        print(row)

        self.user_label.setText(row[0][1])

        #current_date = datetime.now().strftime("%Y-%m-%d")
        #self.date_label.setText(current_date)

    # 시작 버튼에 마우스가 올라갔을 때
    def start_button_enter_event(self, event):
        icon = QtGui.QIcon("images/icon_btn_start_hover.png")  # 마우스가 올라갔을 때의 이미지
        self.start_button.setIcon(icon)

    # 시작 버튼에 마우스가 벗어났을 때
    def start_button_leave_event(self, event):
        icon = QtGui.QIcon("images/icon_btn_start_basic.png")
        self.start_button.setIcon(icon)


    # 홈 화면으로 이동
    def move_to_home(self, userID):
        try:
            from Home import Home
            # 현재 MainWindow를 새로운 창으로 변경
            self.MainWindow.setWindowTitle("Home")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.home_window = Home(self.MainWindow)
            print(userID)
            self.home_window.setupUi(self.MainWindow, userID)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("Calinder to home error : ", e)

    # 결과 화면으로 이동
    def move_to_result(self, userID):
        try:
            from Calinder import Calinder
            # 현재 MainWindow를 새로운 창으로 변경
            self.MainWindow.setWindowTitle("Result")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.result_window = Calinder(self.MainWindow)
            print(userID)
            self.result_window.setupUi(self.MainWindow, userID)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("Calinder to result error : ", e)

    # 훈련 화면으로 이동
    def move_to_train(self, userID):
        try:
            from Train import Train
            # 현재 MainWindow를 새로운 창으로 변경
            self.MainWindow.setWindowTitle("Result")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.train_window = Train(self.MainWindow)
            print(userID)
            self.train_window.setupUi(self.MainWindow, userID)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("Calinder to train error : ", e)

    # 사용자 정보 화면으로 이동
    def move_to_userInform(self, userID):
        try:
            from user_inform_modify import UserInform
            # 현재 MainWindow를 새로운 창으로 변경
            self.MainWindow.setWindowTitle("Result")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.inform_window = UserInform(self.MainWindow)
            print(userID)
            self.inform_window.setupUi(self.MainWindow, userID)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("Calinder to inform error : ", e)

    # 사용자 정보 화면으로 이동
    def move_to_Login(self, userID):
        try:
            from Login import Login
            # 현재 MainWindow를 새로운 창으로 변경
            self.MainWindow.setWindowTitle("Login")  # 새 창의 제목 설정 등 필요한 설정 추가 가능
            self.login_window =  Login(self.MainWindow)
            print(userID)
            self.login_window.setupUi(self.MainWindow)  # home 클래스의 setupUi 메서드 호출
            self.MainWindow.show()
        except Exception as e:
            print("Calinder to login error : ", e)

import gg_rc

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Calinder(MainWindow)
    ui.setupUi(MainWindow, 5)
    MainWindow.show()
    sys.exit(app.exec_())
